{
  "address": "0x56133a31F4cD01EDe8c6EE780071c021bd324aD2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "enum UniversalForwarder.SignatureType",
          "name": "signatureType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"enum UniversalForwarder.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return the DOMAIN_SEPARATOR.\"},\"forward(bytes,uint8,address,bytes)\":{\"params\":{\"data\":\"the content of the call (the signer address will be appended to it).\",\"signature\":\"signature by signer for approving forwarder.\",\"target\":\"destination of the call (that will receive the meta transaction).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"forward(bytes,uint8,address,bytes)\":{\"notice\":\"Forward the meta transaction by first checking signature if forwarder is approved : no storage involved, approving is forever.\"},\"isTrustedForwarder(address)\":{\"notice\":\"The UniversalForwarder supports every EIP-2771 compliant forwarder.\"}},\"notice\":\"Universal Meta Transaction Forwarder It does not perform any extra logic apart from checking if the caller (metatx forwarder) has been approved via signature. Note that forwarder approval are forever. This is to remove the need to read storage. Signature need to be given each time. The overhead (on top of the specific metatx forwarder) is thus just an extra contract load and call + signature check.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/UniversalForwarder.sol\":\"UniversalForwarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"_lib/openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"_lib/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"src/UniversalForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../_lib/openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../_lib/openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./solc_0.7/ERC2771/IERC2771.sol\\\";\\nimport \\\"./solc_0.7/ERC2771/UsingAppendedCallData.sol\\\";\\n\\ninterface ERC1271 {\\n    function isValidSignature(bytes calldata data, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\\ninterface ERC1654 {\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\\n/// @notice Universal Meta Transaction Forwarder\\n/// It does not perform any extra logic apart from checking if the caller (metatx forwarder) has been approved via signature.\\n/// Note that forwarder approval are forever. This is to remove the need to read storage. Signature need to be given each time.\\n/// The overhead (on top of the specific metatx forwarder) is thus just an extra contract load and call + signature check.\\ncontract UniversalForwarder is UsingAppendedCallData, IERC2771 {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    enum SignatureType {DIRECT, EIP1654, EIP1271}\\n    bytes4 internal constant ERC1271_MAGICVALUE = 0x20c13b0b;\\n    bytes4 internal constant ERC1654_MAGICVALUE = 0x1626ba7e;\\n\\n    bytes32 internal constant EIP712DOMAIN_NAME = keccak256(\\\"UniversalForwarder\\\");\\n    bytes32 internal constant APPROVAL_TYPEHASH = keccak256(\\\"ApproveForwarderForever(address forwarder)\\\");\\n\\n    uint256 private immutable _deploymentChainId;\\n    bytes32 private immutable _deploymentDomainSeparator;\\n\\n    constructor() {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _deploymentChainId = chainId;\\n        _deploymentDomainSeparator = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice The UniversalForwarder supports every EIP-2771 compliant forwarder.\\n    function isTrustedForwarder(address) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @notice Forward the meta transaction by first checking signature if forwarder is approved : no storage involved, approving is forever.\\n    /// @param signature signature by signer for approving forwarder.\\n    /// @param target destination of the call (that will receive the meta transaction).\\n    /// @param data the content of the call (the signer address will be appended to it).\\n    function forward(\\n        bytes calldata signature,\\n        SignatureType signatureType,\\n        address target,\\n        bytes calldata data\\n    ) external payable {\\n        address signer = _lastAppendedDataAsSender();\\n        _requireValidSignature(signer, msg.sender, signature, signatureType);\\n        target.functionCallWithValue(abi.encodePacked(data, signer), msg.value);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _DOMAIN_SEPARATOR();\\n    }\\n\\n    // -------------------------------------------------------- INTERNAL --------------------------------------------------------------------\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function _DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        // in case a fork happen, to support the chain that had to change its chainId,, we compue the domain operator\\n        return chainId == _deploymentChainId ? _deploymentDomainSeparator : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR.\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n                    EIP712DOMAIN_NAME,\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function _encodeMessage(address forwarder) internal view returns (bytes memory) {\\n        return abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _DOMAIN_SEPARATOR(), keccak256(abi.encode(APPROVAL_TYPEHASH, forwarder)));\\n    }\\n\\n    function _requireValidSignature(\\n        address signer,\\n        address forwarder,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory dataToHash = _encodeMessage(forwarder);\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(\\n                ERC1271(signer).isValidSignature(dataToHash, signature) == ERC1271_MAGICVALUE,\\n                \\\"SIGNATURE_1271_INVALID\\\"\\n            );\\n        } else if (signatureType == SignatureType.EIP1654) {\\n            require(\\n                ERC1654(signer).isValidSignature(keccak256(dataToHash), signature) == ERC1654_MAGICVALUE,\\n                \\\"SIGNATURE_1654_INVALID\\\"\\n            );\\n        } else {\\n            address actualSigner = keccak256(dataToHash).recover(signature);\\n            require(signer == actualSigner, \\\"SIGNATURE_WRONG_SIGNER\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe58a04d64e55a426245ec6c132d27186ad4c87760b2b33b7f227c588a32acedc\",\"license\":\"MIT\"},\"src/solc_0.7/ERC2771/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC2771 {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc228d7dc57e6007b549e429700606e8942594c3a052e90557958a9b150a36002\",\"license\":\"MIT\"},\"src/solc_0.7/ERC2771/UsingAppendedCallData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract UsingAppendedCallData {\\n    function _lastAppendedDataAsSender() internal pure virtual returns (address payable sender) {\\n        // Copied from openzeppelin : https://github.com/OpenZeppelin/openzeppelin-contracts/blob/9d5f77db9da0604ce0b25148898a94ae2c20d70f/contracts/metatx/ERC2771Context.sol1\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    function _msgDataAssuming20BytesAppendedData() internal pure virtual returns (bytes calldata) {\\n        return msg.data[:msg.data.length - 20];\\n    }\\n}\\n\",\"keccak256\":\"0x9c8e03b9e2e16d40ca6ff3aab6c266308fd25bebecc65e74093629fb22f5c54e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506000469050806080818152505061002d8161003a60201b60201c565b60a08181525050506100d8565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f3544bd4b4e112388a1c8d25798bd769c09279f7bc5bb598c30d847adf8857f758330604051602001808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051602081830303815290604052805190602001209050919050565b60805160a051610fa66100fb600039806108225250806107ed5250610fa66000f3fe6080604052600436106100345760003560e01c8063060e2221146100395780633644e51514610134578063572b6c051461015f575b600080fd5b6101326004803603608081101561004f57600080fd5b810190808035906020019064010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b9091929391929390803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b90919293919293905050506101c6565b005b34801561014057600080fd5b506101496102a0565b6040518082815260200191505060405180910390f35b34801561016b57600080fd5b506101ae6004803603602081101561018257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102af565b60405180821515815260200191505060405180910390f35b60006101d06102ba565b9050610222813389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050886102c9565b61029683838360405160200180848480828437808301925050508273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052348673ffffffffffffffffffffffffffffffffffffffff166107b69092919063ffffffff16565b5050505050505050565b60006102aa6107e5565b905090565b600060019050919050565b6000601436033560601c905090565b60006102d484610848565b90506002808111156102e257fe5b8260028111156102ee57fe5b1415610510576320c13b0b60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168573ffffffffffffffffffffffffffffffffffffffff166320c13b0b83866040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561038c578082015181840152602081019050610371565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156103f25780820151818401526020810190506103d7565b50505050905090810190601f16801561041f5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561043e57600080fd5b505afa158015610452573d6000803e3d6000fd5b505050506040513d602081101561046857600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461050b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5349474e41545552455f313237315f494e56414c49440000000000000000000081525060200191505060405180910390fd5b6107af565b6001600281111561051d57fe5b82600281111561052957fe5b14156106ed57631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168573ffffffffffffffffffffffffffffffffffffffff16631626ba7e8380519060200120866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d05780820151818401526020810190506105b5565b50505050905090810190601f1680156105fd5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561061b57600080fd5b505afa15801561062f573d6000803e3d6000fd5b505050506040513d602081101561064557600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5349474e41545552455f313635345f494e56414c49440000000000000000000081525060200191505060405180910390fd5b6107ae565b600061070984838051906020012061090c90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5349474e41545552455f57524f4e475f5349474e45520000000000000000000081525060200191505060405180910390fd5b505b5b5050505050565b60606107dc848484604051806060016040528060298152602001610f48602991396109b9565b90509392505050565b6000804690507f000000000000000000000000000000000000000000000000000000000000000081146108205761081b81610b61565b610842565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60606108526107e5565b7f29d8e60834ee7989c6c60ff9e88b28b7374ac20486dfbb18f0afd054ef6a221183604051602001808381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040528051906020012060405160200180807f1901000000000000000000000000000000000000000000000000000000000000815250600201838152602001828152602001925050506040516020818303038152906040529050919050565b60006041825114610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081525060200191505060405180910390fd5b60008060006020850151925060408501519150606085015160001a90506109ae86828585610bff565b935050505092915050565b606082471015610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610f006026913960400191505060405180910390fd5b610a1d85610dfe565b610a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610ade5780518252602082019150602081019050602083039250610abb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b40576040519150601f19603f3d011682016040523d82523d6000602084013e610b45565b606091505b5091509150610b55828286610e11565b92505050949350505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f3544bd4b4e112388a1c8d25798bd769c09279f7bc5bb598c30d847adf8857f758330604051602001808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115610c7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610ede6022913960400191505060405180910390fd5b601b8460ff161480610c925750601c8460ff16145b610ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610f266022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610d43573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610df2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f45434453413a20696e76616c6964207369676e6174757265000000000000000081525060200191505060405180910390fd5b80915050949350505050565b600080823b905060008111915050919050565b60608315610e2157829050610ed6565b600083511115610e345782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e9b578082015181840152602081019050610e80565b50505050905090810190601f168015610ec85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c45434453413a20696e76616c6964207369676e6174757265202776272076616c7565416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122066b1626d8672ac1584699b96aa4860bdd1cdcd82af6969b04dfb419a4bfde84064736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063060e2221146100395780633644e51514610134578063572b6c051461015f575b600080fd5b6101326004803603608081101561004f57600080fd5b810190808035906020019064010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b9091929391929390803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b90919293919293905050506101c6565b005b34801561014057600080fd5b506101496102a0565b6040518082815260200191505060405180910390f35b34801561016b57600080fd5b506101ae6004803603602081101561018257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102af565b60405180821515815260200191505060405180910390f35b60006101d06102ba565b9050610222813389898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050886102c9565b61029683838360405160200180848480828437808301925050508273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052348673ffffffffffffffffffffffffffffffffffffffff166107b69092919063ffffffff16565b5050505050505050565b60006102aa6107e5565b905090565b600060019050919050565b6000601436033560601c905090565b60006102d484610848565b90506002808111156102e257fe5b8260028111156102ee57fe5b1415610510576320c13b0b60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168573ffffffffffffffffffffffffffffffffffffffff166320c13b0b83866040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561038c578082015181840152602081019050610371565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156103f25780820151818401526020810190506103d7565b50505050905090810190601f16801561041f5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561043e57600080fd5b505afa158015610452573d6000803e3d6000fd5b505050506040513d602081101561046857600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461050b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5349474e41545552455f313237315f494e56414c49440000000000000000000081525060200191505060405180910390fd5b6107af565b6001600281111561051d57fe5b82600281111561052957fe5b14156106ed57631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168573ffffffffffffffffffffffffffffffffffffffff16631626ba7e8380519060200120866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d05780820151818401526020810190506105b5565b50505050905090810190601f1680156105fd5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561061b57600080fd5b505afa15801561062f573d6000803e3d6000fd5b505050506040513d602081101561064557600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5349474e41545552455f313635345f494e56414c49440000000000000000000081525060200191505060405180910390fd5b6107ae565b600061070984838051906020012061090c90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f5349474e41545552455f57524f4e475f5349474e45520000000000000000000081525060200191505060405180910390fd5b505b5b5050505050565b60606107dc848484604051806060016040528060298152602001610f48602991396109b9565b90509392505050565b6000804690507f000000000000000000000000000000000000000000000000000000000000000081146108205761081b81610b61565b610842565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60606108526107e5565b7f29d8e60834ee7989c6c60ff9e88b28b7374ac20486dfbb18f0afd054ef6a221183604051602001808381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040528051906020012060405160200180807f1901000000000000000000000000000000000000000000000000000000000000815250600201838152602001828152602001925050506040516020818303038152906040529050919050565b60006041825114610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081525060200191505060405180910390fd5b60008060006020850151925060408501519150606085015160001a90506109ae86828585610bff565b935050505092915050565b606082471015610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610f006026913960400191505060405180910390fd5b610a1d85610dfe565b610a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610ade5780518252602082019150602081019050602083039250610abb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b40576040519150601f19603f3d011682016040523d82523d6000602084013e610b45565b606091505b5091509150610b55828286610e11565b92505050949350505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f3544bd4b4e112388a1c8d25798bd769c09279f7bc5bb598c30d847adf8857f758330604051602001808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115610c7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610ede6022913960400191505060405180910390fd5b601b8460ff161480610c925750601c8460ff16145b610ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610f266022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610d43573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610df2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f45434453413a20696e76616c6964207369676e6174757265000000000000000081525060200191505060405180910390fd5b80915050949350505050565b600080823b905060008111915050919050565b60608315610e2157829050610ed6565b600083511115610e345782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e9b578082015181840152602081019050610e80565b50505050905090810190601f168015610ec85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c45434453413a20696e76616c6964207369676e6174757265202776272076616c7565416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122066b1626d8672ac1584699b96aa4860bdd1cdcd82af6969b04dfb419a4bfde84064736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return the DOMAIN_SEPARATOR."
      },
      "forward(bytes,uint8,address,bytes)": {
        "params": {
          "data": "the content of the call (the signer address will be appended to it).",
          "signature": "signature by signer for approving forwarder.",
          "target": "destination of the call (that will receive the meta transaction)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "forward(bytes,uint8,address,bytes)": {
        "notice": "Forward the meta transaction by first checking signature if forwarder is approved : no storage involved, approving is forever."
      },
      "isTrustedForwarder(address)": {
        "notice": "The UniversalForwarder supports every EIP-2771 compliant forwarder."
      }
    },
    "notice": "Universal Meta Transaction Forwarder It does not perform any extra logic apart from checking if the caller (metatx forwarder) has been approved via signature. Note that forwarder approval are forever. This is to remove the need to read storage. Signature need to be given each time. The overhead (on top of the specific metatx forwarder) is thus just an extra contract load and call + signature check.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
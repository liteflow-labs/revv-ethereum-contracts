{
  "language": "Solidity",
  "sources": {
    "contracts/sale/REVVSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.6.8;\n\nimport \"@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/IERC721.sol\";\nimport \"@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/IERC20.sol\";\nimport \"@animoca/ethereum-contracts-sale_base/contracts/sale/FixedPricesSale.sol\";\n\n/**\n * @title REVVSale\n * A sale contract for the initial REVV distribution to F1 NFT owners.\n */\ncontract REVVSale is FixedPricesSale {\n    IERC20 public immutable revv;\n    IERC721 public immutable deltaTimeInventory;\n\n    /**\n     * Constructor.\n     * @param payoutWallet_ The wallet address used to receive purchase payments.\n     */\n    constructor(\n        address revv_,\n        address deltaTimeInventory_,\n        address payable payoutWallet_\n    ) public FixedPricesSale(payoutWallet_, 64, 32) {\n        require(revv_ != address(0), \"REVVSale: zero address REVV \");\n        // solhint-disable-next-line reason-string\n        require(deltaTimeInventory_ != address(0), \"REVVSale: zero address inventory \");\n        revv = IERC20(revv_);\n        deltaTimeInventory = IERC721(deltaTimeInventory_);\n    }\n\n    /**\n     * Creates a REVV sku and funds the necessary amount to this contract.\n     * @dev Reverts if called by any other than the contract owner.\n     * @dev Reverts if `totalSupply` is zero.\n     * @dev Reverts if `sku` already exists.\n     * @dev Reverts if `notificationsReceiver` is not the zero address and is not a contract address.\n     * @dev Reverts if the update results in too many SKUs.\n     * @dev Reverts if the REVV funding fails.\n     * @dev Emits the `SkuCreation` event.\n     * @param sku the SKU identifier.\n     * @param totalSupply the initial total supply.\n     * @param maxQuantityPerPurchase The maximum allowed quantity for a single purchase.\n     * @param notificationsReceiver The purchase notifications receiver contract address.\n     *  If set to the zero address, the notification is not enabled.\n     */\n    function createSku(\n        bytes32 sku,\n        uint256 totalSupply,\n        uint256 maxQuantityPerPurchase,\n        address notificationsReceiver\n    ) public virtual override {\n        super.createSku(sku, totalSupply, maxQuantityPerPurchase, notificationsReceiver);\n        require(revv.transferFrom(_msgSender(), address(this), totalSupply.mul(1000000000000000000)), \"REVVSale: REVV transfer failed\");\n    }\n\n    /**\n     * Lifecycle step which validates the purchase pre-conditions.\n     * @dev Responsibilities:\n     *  - Ensure that the purchase pre-conditions are met and revert if not.\n     * @param purchase The purchase conditions.\n     */\n    function _validation(PurchaseData memory purchase) internal view override {\n        super._validation(purchase);\n        require(deltaTimeInventory.balanceOf(_msgSender()) != 0, \"REVVSale: must be a NFT owner\");\n    }\n\n    function _delivery(PurchaseData memory purchase) internal override {\n        super._delivery(purchase);\n        require(revv.transfer(purchase.recipient, purchase.quantity.mul(1000000000000000000)), \"REVVSale:  REVV transfer failed\");\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC721 Non-Fungible Token Standard, basic interface\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n * Note: The ERC-165 identifier for this interface is 0x80ac58cd.\n */\ninterface IERC721 {\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n     * Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return balance uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * Gets the owner of the specified ID\n     * @param tokenId uint256 ID to query the owner of\n     * @return owner address currently marked as the owner of the given ID\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * Approves another address to transfer the given token ID\n     * @dev The zero address indicates there is no approved address.\n     * @dev There can only be one approved address per token at a given time.\n     * @dev Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * Gets the approved address for a token ID, or zero if no address set\n     * @dev Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return operator address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * Sets or unsets the approval of a given operator\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param operator operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * Transfers the ownership of a given token ID to another address\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * Safely transfers the ownership of a given token ID to another address\n     *\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * Safely transfers the ownership of a given token ID to another address\n     *\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/IERC20.sol": {
      "content": "/*\nhttps://github.com/OpenZeppelin/openzeppelin-contracts\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2019 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n"
    },
    "@animoca/ethereum-contracts-sale_base/contracts/sale/FixedPricesSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/IERC20.sol\";\nimport \"./AbstractSale.sol\";\n\n/**\n * @title FixedPricesSale\n * An AbstractSale which implements a fixed prices strategy.\n *  The final implementer is responsible for implementing any additional pricing and/or delivery logic.\n */\ncontract FixedPricesSale is AbstractSale {\n    /**\n     * Constructor.\n     * @dev Emits the `MagicValues` event.\n     * @dev Emits the `Paused` event.\n     * @param payoutWallet_ the payout wallet.\n     * @param skusCapacity the cap for the number of managed SKUs.\n     * @param tokensPerSkuCapacity the cap for the number of tokens managed per SKU.\n     */\n    constructor(\n        address payoutWallet_,\n        uint256 skusCapacity,\n        uint256 tokensPerSkuCapacity\n    ) internal AbstractSale(payoutWallet_, skusCapacity, tokensPerSkuCapacity) {}\n\n    /*                               Internal Life Cycle Functions                               */\n\n    /**\n     * Lifecycle step which computes the purchase price.\n     * @dev Responsibilities:\n     *  - Computes the pricing formula, including any discount logic and price conversion;\n     *  - Set the value of `purchase.totalPrice`;\n     *  - Add any relevant extra data related to pricing in `purchase.pricingData` and document how to interpret it.\n     * @dev Reverts if `purchase.sku` does not exist.\n     * @dev Reverts if `purchase.token` is not supported by the SKU.\n     * @dev Reverts in case of price overflow.\n     * @param purchase The purchase conditions.\n     */\n    function _pricing(PurchaseData memory purchase) internal virtual override view {\n        SkuInfo storage skuInfo = _skuInfos[purchase.sku];\n        require(skuInfo.totalSupply != 0, \"Sale: unsupported SKU\");\n        EnumMap.Map storage prices = skuInfo.prices;\n        uint256 unitPrice = _unitPrice(purchase, prices);\n        purchase.totalPrice = unitPrice.mul(purchase.quantity);\n    }\n\n    /**\n     * Lifecycle step which manages the transfer of funds from the purchaser.\n     * @dev Responsibilities:\n     *  - Ensure the payment reaches destination in the expected output token;\n     *  - Handle any token swap logic;\n     *  - Add any relevant extra data related to payment in `purchase.paymentData` and document how to interpret it.\n     * @dev Reverts in case of payment failure.\n     * @param purchase The purchase conditions.\n     */\n    function _payment(PurchaseData memory purchase) internal virtual override {\n        if (purchase.token == TOKEN_ETH) {\n            require(msg.value >= purchase.totalPrice, \"Sale: insufficient ETH provided\");\n\n            payoutWallet.transfer(purchase.totalPrice);\n\n            uint256 change = msg.value.sub(purchase.totalPrice);\n\n            if (change != 0) {\n                purchase.purchaser.transfer(change);\n            }\n        } else {\n            require(\n                IERC20(purchase.token).transferFrom(_msgSender(), payoutWallet, purchase.totalPrice),\n                \"Sale: ERC20 payment failed\"\n            );\n        }\n    }\n\n    /*                               Internal Utility Functions                               */\n\n    function _unitPrice(PurchaseData memory purchase, EnumMap.Map storage prices)\n        internal\n        virtual\n        view\n        returns (uint256 unitPrice)\n    {\n        unitPrice = uint256(prices.get(bytes32(uint256(purchase.token))));\n        require(unitPrice != 0, \"Sale: unsupported payment token\");\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-sale_base/contracts/sale/AbstractSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@animoca/ethereum-contracts-core_library/contracts/algo/EnumMap.sol\";\nimport \"@animoca/ethereum-contracts-core_library/contracts/algo/EnumSet.sol\";\nimport \"@animoca/ethereum-contracts-core_library/contracts/payment/PayoutWallet.sol\";\nimport \"@animoca/ethereum-contracts-core_library/contracts/utils/Startable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/ISale.sol\";\nimport \"./interfaces/IPurchaseNotificationsReceiver.sol\";\nimport \"./PurchaseLifeCycles.sol\";\n\n/**\n * @title AbstractSale\n * An abstract base sale contract with a minimal implementation of ISale and administration functions.\n *  A minimal implementation of the `_validation`, `_delivery` and `notification` life cycle step functions\n *  are provided, but the inheriting contract must implement `_pricing` and `_payment`.\n */\nabstract contract AbstractSale is PurchaseLifeCycles, ISale, PayoutWallet, Startable, Pausable {\n    using Address for address;\n    using SafeMath for uint256;\n    using EnumSet for EnumSet.Set;\n    using EnumMap for EnumMap.Map;\n\n    struct SkuInfo {\n        uint256 totalSupply;\n        uint256 remainingSupply;\n        uint256 maxQuantityPerPurchase;\n        address notificationsReceiver;\n        EnumMap.Map prices;\n    }\n\n    address public constant override TOKEN_ETH = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint256 public constant override SUPPLY_UNLIMITED = type(uint256).max;\n\n    EnumSet.Set internal _skus;\n    mapping(bytes32 => SkuInfo) internal _skuInfos;\n\n    uint256 internal immutable _skusCapacity;\n    uint256 internal immutable _tokensPerSkuCapacity;\n\n    /**\n     * Constructor.\n     * @dev Emits the `MagicValues` event.\n     * @dev Emits the `Paused` event.\n     * @param payoutWallet_ the payout wallet.\n     * @param skusCapacity the cap for the number of managed SKUs.\n     * @param tokensPerSkuCapacity the cap for the number of tokens managed per SKU.\n     */\n    constructor(\n        address payoutWallet_,\n        uint256 skusCapacity,\n        uint256 tokensPerSkuCapacity\n    ) internal PayoutWallet(payoutWallet_) {\n        _skusCapacity = skusCapacity;\n        _tokensPerSkuCapacity = tokensPerSkuCapacity;\n        bytes32[] memory names = new bytes32[](2);\n        bytes32[] memory values = new bytes32[](2);\n        (names[0], values[0]) = (\"TOKEN_ETH\", bytes32(uint256(TOKEN_ETH)));\n        (names[1], values[1]) = (\"SUPPLY_UNLIMITED\", bytes32(uint256(SUPPLY_UNLIMITED)));\n        emit MagicValues(names, values);\n        _pause();\n    }\n\n    /*                               Public Admin Functions                               */\n\n    /**\n     * Actvates, or 'starts', the contract.\n     * @dev Emits the `Started` event.\n     * @dev Emits the `Unpaused` event.\n     * @dev Reverts if called by any other than the contract owner.\n     * @dev Reverts if the contract has already been started.\n     * @dev Reverts if the contract is not paused.\n     */\n    function start() public virtual onlyOwner {\n        _start();\n        _unpause();\n    }\n\n    /**\n     * Pauses the contract.\n     * @dev Emits the `Paused` event.\n     * @dev Reverts if called by any other than the contract owner.\n     * @dev Reverts if the contract has not been started yet.\n     * @dev Reverts if the contract is already paused.\n     */\n    function pause() public virtual onlyOwner whenStarted {\n        _pause();\n    }\n\n    /**\n     * Resumes the contract.\n     * @dev Emits the `Unpaused` event.\n     * @dev Reverts if called by any other than the contract owner.\n     * @dev Reverts if the contract has not been started yet.\n     * @dev Reverts if the contract is not paused.\n     */\n    function unpause() public virtual onlyOwner whenStarted {\n        _unpause();\n    }\n\n    /**\n     * Creates an SKU.\n     * @dev Reverts if called by any other than the contract owner.\n     * @dev Reverts if `totalSupply` is zero.\n     * @dev Reverts if `sku` already exists.\n     * @dev Reverts if `notificationsReceiver` is not the zero address and is not a contract address.\n     * @dev Reverts if the update results in too many SKUs.\n     * @dev Emits the `SkuCreation` event.\n     * @param sku the SKU identifier.\n     * @param totalSupply the initial total supply.\n     * @param maxQuantityPerPurchase The maximum allowed quantity for a single purchase.\n     * @param notificationsReceiver The purchase notifications receiver contract address.\n     *  If set to the zero address, the notification is not enabled.\n     */\n    function createSku(\n        bytes32 sku,\n        uint256 totalSupply,\n        uint256 maxQuantityPerPurchase,\n        address notificationsReceiver\n    ) public virtual onlyOwner {\n        require(totalSupply != 0, \"Sale: zero supply\");\n        require(_skus.length() < _skusCapacity, \"Sale: too many skus\");\n        require(_skus.add(sku), \"Sale: sku already created\");\n        if (notificationsReceiver != address(0)) {\n            require(notificationsReceiver.isContract(), \"Sale: receiver is not a contract\");\n        }\n        SkuInfo storage skuInfo = _skuInfos[sku];\n        skuInfo.totalSupply = totalSupply;\n        skuInfo.remainingSupply = totalSupply;\n        skuInfo.maxQuantityPerPurchase = maxQuantityPerPurchase;\n        skuInfo.notificationsReceiver = notificationsReceiver;\n        emit SkuCreation(sku, totalSupply, maxQuantityPerPurchase, notificationsReceiver);\n    }\n\n    /**\n     * Sets the token prices for the specified product SKU.\n     * @dev Reverts if called by any other than the contract owner.\n     * @dev Reverts if `tokens` and `prices` have different lengths.\n     * @dev Reverts if `sku` does not exist.\n     * @dev Reverts if one of the `tokens` is the zero address.\n     * @dev Reverts if the update results in too many tokens for the SKU.\n     * @dev Emits the `SkuPricingUpdate` event.\n     * @param sku The identifier of the SKU.\n     * @param tokens The list of payment tokens to update.\n     *  If empty, disable all the existing payment tokens.\n     * @param prices The list of prices to apply for each payment token.\n     *  Zero price values are used to disable a payment token.\n     */\n    function updateSkuPricing(\n        bytes32 sku,\n        address[] memory tokens,\n        uint256[] memory prices\n    ) public virtual onlyOwner {\n        uint256 length = tokens.length;\n        require(length == prices.length, \"Sale: tokens/prices lengths mismatch\");\n        SkuInfo storage skuInfo = _skuInfos[sku];\n        require(skuInfo.totalSupply != 0, \"Sale: non-existent sku\");\n\n        EnumMap.Map storage tokenPrices = skuInfo.prices;\n        if (length == 0) {\n            uint256 currentLength = tokenPrices.length();\n            for (uint256 i = 0; i < currentLength; ++i) {\n                // TODO add a clear function in EnumMap and EnumSet and use it\n                (bytes32 token, ) = tokenPrices.at(0);\n                tokenPrices.remove(token);\n            }\n        } else {\n            _setTokenPrices(tokenPrices, tokens, prices);\n        }\n\n        emit SkuPricingUpdate(sku, tokens, prices);\n    }\n\n    /*                               ISale Public Functions                               */\n\n    /**\n     * Performs a purchase.\n     * @dev Reverts if the sale has not started.\n     * @dev Reverts if the sale is paused.\n     * @dev Reverts if `token` is the address zero.\n     * @dev Reverts if `quantity` is zero.\n     * @dev Reverts if `quantity` is greater than the maximum purchase quantity.\n     * @dev Reverts if `quantity` is greater than the remaining supply.\n     * @dev Reverts if `sku` does not exist.\n     * @dev Reverts if `sku` exists but does not have a price set for `token`.\n     * @dev Emits the Purchase event.\n     * @param recipient The recipient of the purchase.\n     * @param token The token to use as the payment currency.\n     * @param sku The identifier of the SKU to purchase.\n     * @param quantity The quantity to purchase.\n     * @param userData Optional extra user input data.\n     */\n    function purchaseFor(\n        address payable recipient,\n        address token,\n        bytes32 sku,\n        uint256 quantity,\n        bytes calldata userData\n    ) external virtual override payable whenStarted whenNotPaused {\n        PurchaseData memory purchase;\n        purchase.purchaser = _msgSender();\n        purchase.recipient = recipient;\n        purchase.token = token;\n        purchase.sku = sku;\n        purchase.quantity = quantity;\n        purchase.userData = userData;\n\n        _purchaseFor(purchase);\n    }\n\n    /**\n     * Estimates the computed final total amount to pay for a purchase, including any potential discount.\n     * @dev This function MUST compute the same price as `purchaseFor` would in identical conditions (same arguments, same point in time).\n     * @dev If an implementer contract uses the `priceInfo` field, it SHOULD document how to interpret the info.\n     * @dev Reverts if the sale has not started.\n     * @dev Reverts if the sale is paused.\n     * @dev Reverts if `token` is the zero address.\n     * @dev Reverts if `quantity` is zero.\n     * @dev Reverts if `quantity` is greater than the maximum purchase quantity.\n     * @dev Reverts if `quantity` is greater than the remaining supply.\n     * @dev Reverts if `sku` does not exist.\n     * @dev Reverts if `sku` exists but does not have a price set for `token`.\n     * @param recipient The recipient of the purchase used to calculate the total price amount.\n     * @param token The payment token used to calculate the total price amount.\n     * @param sku The identifier of the SKU used to calculate the total price amount.\n     * @param quantity The quantity used to calculate the total price amount.\n     * @param userData Optional extra user input data.\n     * @return totalPrice The computed total price.\n     * @return priceInfo Implementation-specific extra price information, such as details about potential discounts applied.\n     */\n    function estimatePurchase(\n        address payable recipient,\n        address token,\n        bytes32 sku,\n        uint256 quantity,\n        bytes calldata userData\n    ) external virtual override view whenStarted whenNotPaused returns (uint256 totalPrice, bytes32[] memory priceInfo) {\n        PurchaseData memory purchase;\n        purchase.purchaser = _msgSender();\n        purchase.recipient = recipient;\n        purchase.token = token;\n        purchase.sku = sku;\n        purchase.quantity = quantity;\n        purchase.userData = userData;\n\n        return _estimatePurchase(purchase);\n    }\n\n    /**\n     * Returns the information relative to a SKU.\n     * @dev WARNING: it is the responsibility of the implementer to ensure that the\n     * number of payment tokens is bounded, so that this function does not run out of gas.\n     * @dev Reverts if `sku` does not exist.\n     * @param sku The SKU identifier.\n     * @return totalSupply The initial total supply for sale.\n     * @return remainingSupply The remaining supply for sale.\n     * @return maxQuantityPerPurchase The maximum allowed quantity for a single purchase.\n     * @return notificationsReceiver The address of a contract on which to call the `onPurchaseNotificationReceived` function.\n     * @return tokens The list of supported payment tokens.\n     * @return prices The list of associated prices for each of the `tokens`.\n     */\n    function getSkuInfo(bytes32 sku)\n        external\n        override\n        view\n        returns (\n            uint256 totalSupply,\n            uint256 remainingSupply,\n            uint256 maxQuantityPerPurchase,\n            address notificationsReceiver,\n            address[] memory tokens,\n            uint256[] memory prices\n        )\n    {\n        SkuInfo storage skuInfo = _skuInfos[sku];\n        uint256 length = skuInfo.prices.length();\n\n        totalSupply = skuInfo.totalSupply;\n        remainingSupply = skuInfo.remainingSupply;\n        maxQuantityPerPurchase = skuInfo.maxQuantityPerPurchase;\n        notificationsReceiver = skuInfo.notificationsReceiver;\n\n        tokens = new address[](length);\n        prices = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            (bytes32 token, bytes32 price) = skuInfo.prices.at(i);\n            tokens[i] = address(uint256(token));\n            prices[i] = uint256(price);\n        }\n    }\n\n    /**\n     * Returns the list of created SKU identifiers.\n     * @return skus the list of created SKU identifiers.\n     */\n    function getSkus() external override view returns (bytes32[] memory skus) {\n        skus = _skus.values;\n    }\n\n\n    /*                               Internal Utility Functions                               */\n\n    function _setTokenPrices(\n        EnumMap.Map storage tokenPrices,\n        address[] memory tokens,\n        uint256[] memory prices\n    ) internal virtual {\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            address token = tokens[i];\n            require(token != address(0), \"Sale: zero address token\");\n            uint256 price = prices[i];\n            if (price == 0) {\n                tokenPrices.remove(bytes32(uint256(token)));\n            } else {\n                tokenPrices.set(bytes32(uint256(token)), bytes32(price));\n            }\n        }\n        require(tokenPrices.length() <= _tokensPerSkuCapacity, \"Sale: too many tokens\");\n    }\n\n    /*                               Internal Life Cycle Step Functions                               */\n\n    /**\n     * Lifecycle step which validates the purchase pre-conditions.\n     * @dev Responsibilities:\n     *  - Ensure that the purchase pre-conditions are met and revert if not.\n     * @dev Reverts if `purchase.recipient` is the zero address.\n     * @dev Reverts if `purchase.quantity` is zero.\n     * @dev Reverts if `purchase.quantity` is greater than the SKU's `maxQuantityPerPurchase`.\n     * @dev Reverts if `purchase.quantity` is greater than the available supply.\n     * @dev If this function is overriden, the implementer SHOULD super call this before.\n     * @param purchase The purchase conditions.\n     */\n    function _validation(PurchaseData memory purchase) internal virtual override view {\n        require(purchase.recipient != address(0), \"Sale: zero address recipient\");\n        require(purchase.quantity != 0, \"Sale: zero quantity purchase\");\n        SkuInfo memory skuInfo = _skuInfos[purchase.sku];\n        require(purchase.quantity <= skuInfo.maxQuantityPerPurchase, \"Sale: above max quantity\");\n        if (skuInfo.totalSupply != SUPPLY_UNLIMITED) {\n            require(skuInfo.remainingSupply >= purchase.quantity, \"Sale: insufficient supply\");\n        }\n    }\n\n    /**\n     * Lifecycle step which delivers the purchased SKUs to the recipient.\n     * @dev Responsibilities:\n     *  - Ensure the product is delivered to the recipient, if that is the contract's responsibility.\n     *  - Handle any internal logic related to the delivery, including the remaining supply update;\n     *  - Add any relevant extra data related to delivery in `purchase.deliveryData` and document how to interpret it.\n     * @dev Reverts if there is not enough available supply.\n     * @dev If this function is overriden, the implementer SHOULD super call it.\n     * @param purchase The purchase conditions.\n     */\n    function _delivery(PurchaseData memory purchase) internal virtual override {\n        SkuInfo memory skuInfo = _skuInfos[purchase.sku];\n        if (skuInfo.totalSupply != SUPPLY_UNLIMITED) {\n            _skuInfos[purchase.sku].remainingSupply = skuInfo.remainingSupply.sub(purchase.quantity);\n        }\n    }\n\n    /**\n     * Lifecycle step which notifies of the purchase.\n     * @dev Responsibilities:\n     *  - Manage after-purchase event(s) emission.\n     *  - Handle calls to the notifications receiver contract's `onPurchaseNotificationReceived` function, if applicable.\n     * @dev Reverts if `onPurchaseNotificationReceived` throws or returns an incorrect value.\n     * @dev Emits the `Purchase` event. The values of `purchaseData` are the concatenated values of `priceData`, `paymentData`\n     * and `deliveryData`. If not empty, the implementer MUST document how to interpret these values.\n     * @dev If this function is overriden, the implementer SHOULD super call it.\n     * @param purchase The purchase conditions.\n     */\n    function _notification(PurchaseData memory purchase) internal virtual override {\n        emit Purchase(\n            purchase.purchaser,\n            purchase.recipient,\n            purchase.token,\n            purchase.sku,\n            purchase.quantity,\n            purchase.userData,\n            purchase.totalPrice,\n            purchase.pricingData,\n            purchase.paymentData,\n            purchase.deliveryData\n        );\n\n        address notificationsReceiver = _skuInfos[purchase.sku].notificationsReceiver;\n        if (notificationsReceiver != address(0)) {\n            require(\n                IPurchaseNotificationsReceiver(notificationsReceiver).onPurchaseNotificationReceived(\n                    purchase.purchaser,\n                    purchase.recipient,\n                    purchase.token,\n                    purchase.sku,\n                    purchase.quantity,\n                    purchase.userData,\n                    purchase.totalPrice,\n                    purchase.pricingData,\n                    purchase.paymentData,\n                    purchase.deliveryData\n                ) == IPurchaseNotificationsReceiver(address(0)).onPurchaseNotificationReceived.selector, // TODO precompute return value\n                \"Sale: wrong receiver return value\"\n            );\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/algo/EnumMap.sol": {
      "content": "/*\nhttps://github.com/OpenZeppelin/openzeppelin-contracts\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2019 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumMap for EnumMap.Map;\n *\n *     // Declare a set state variable\n *     EnumMap.Map private myMap;\n * }\n * ```\n */\nlibrary EnumMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // This means that we can only create new EnumMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 key;\n        bytes32 value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] entries;\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping(bytes32 => uint256) indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map.indexes[key];\n\n        if (keyIndex == 0) {\n            // Equivalent to !contains(map, key)\n            map.entries.push(MapEntry({key: key, value: value}));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map.indexes[key] = map.entries.length;\n            return true;\n        } else {\n            map.entries[keyIndex - 1].value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Map storage map, bytes32 key) internal returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map.indexes[key];\n\n        if (keyIndex != 0) {\n            // Equivalent to contains(map, key)\n            // To delete a key-value pair from the entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map.entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map.entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map.entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map.indexes[lastEntry.key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map.entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map.indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Map storage map, bytes32 key) internal view returns (bool) {\n        return map.indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Map storage map) internal view returns (uint256) {\n        return map.entries.length;\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        require(map.entries.length > index, \"EnumMap: index out of bounds\");\n\n        MapEntry storage entry = map.entries[index];\n        return (entry.key, entry.value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Map storage map, bytes32 key) internal view returns (bytes32) {\n        uint256 keyIndex = map.indexes[key];\n        require(keyIndex != 0, \"EnumMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map.entries[keyIndex - 1].value; // All indexes are 1-based\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/algo/EnumSet.sol": {
      "content": "/*\nhttps://github.com/OpenZeppelin/openzeppelin-contracts\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2019 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumSet for EnumSet.Set;\n *\n *     // Declare a set state variable\n *     EnumSet.Set private mySet;\n * }\n * ```\n */\nlibrary EnumSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Set storage set, bytes32 value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set.values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set.indexes[value] = set.values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Set storage set, bytes32 value) internal returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set.indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set.values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set.values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set.values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set.indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set.values.pop();\n\n            // Delete the index for the deleted slot\n            delete set.indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Set storage set, bytes32 value) internal view returns (bool) {\n        return set.indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(Set storage set) internal view returns (uint256) {\n        return set.values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Set storage set, uint256 index) internal view returns (bytes32) {\n        require(set.values.length > index, \"EnumSet: index out of bounds\");\n        return set.values[index];\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/payment/PayoutWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n    @title PayoutWallet\n    @dev adds support for a payout wallet\n    Note: .\n */\ncontract PayoutWallet is Ownable {\n    event PayoutWalletSet(address payoutWallet_);\n\n    address payable public payoutWallet;\n\n    constructor(address payoutWallet_) internal {\n        setPayoutWallet(payoutWallet_);\n    }\n\n    function setPayoutWallet(address payoutWallet_) public onlyOwner {\n        require(payoutWallet_ != address(0), \"Payout: zero address\");\n        require(payoutWallet_ != address(this), \"Payout: this contract as payout\");\n        require(payoutWallet_ != payoutWallet, \"Payout: same payout wallet\");\n        payoutWallet = payable(payoutWallet_);\n        emit PayoutWalletSet(payoutWallet);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/utils/Startable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\n\n/**\n * Contract module which allows derived contracts to implement a mechanism for\n * activating, or 'starting', a contract.\n *\n * This module is used through inheritance. It will make available the modifiers\n * `whenNotStarted` and `whenStarted`, which can be applied to the functions of\n * your contract. Those functions will only be 'startable' once the modifiers\n * are put in place.\n */\ncontract Startable is Context {\n    event Started(address account);\n\n    uint256 private _startedAt;\n\n    /**\n     * Modifier to make a function callable only when the contract has not started.\n     */\n    modifier whenNotStarted() {\n        require(_startedAt == 0, \"Startable: started\");\n        _;\n    }\n\n    /**\n     * Modifier to make a function callable only when the contract has started.\n     */\n    modifier whenStarted() {\n        require(_startedAt != 0, \"Startable: not started\");\n        _;\n    }\n\n    /**\n     * Constructor.\n     */\n    constructor() internal {}\n\n    /**\n     * Returns the timestamp when the contract entered the started state.\n     * @return The timestamp when the contract entered the started state.\n     */\n    function startedAt() public view returns (uint256) {\n        return _startedAt;\n    }\n\n    /**\n     * Triggers the started state.\n     * @dev Emits the Started event when the function is successfully called.\n     */\n    function _start() internal virtual whenNotStarted {\n        _startedAt = now;\n        emit Started(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-sale_base/contracts/sale/interfaces/ISale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ISale\n *\n * An interface for a contract which allows merchants to display products and customers to purchase them.\n *\n *  Products, designated as SKUs, are represented by bytes32 identifiers so that an identifier can carry an\n *  explicit name under the form of a fixed-length string. Each SKU can be priced via up to several payment\n *  tokens which can be ETH and/or ERC20(s). ETH token is represented by the magic value TOKEN_ETH, which means\n *  this value can be used as the 'token' argument of the purchase-related functions to indicate ETH payment.\n *\n *  The total available supply for a SKU is fixed at its creation. The magic value SUPPLY_UNLIMITED is used\n *  to represent a SKU with an infinite, never-decreasing supply. An optional purchase notifications receiver\n *  contract address can be set for a SKU at its creation: if the value is different from the zero address,\n *  the function `onPurchaseNotificationReceived` will be called on this address upon every purchase of the SKU.\n *\n *  This interface is designed to be consistent while managing a variety of implementation scenarios. It is\n *  also intended to be developer-friendly: all vital information is consistently deductible from the events\n *  (backend-oriented), as well as retrievable through calls to public functions (frontend-oriented).\n */\ninterface ISale {\n    /**\n     * Event emitted to notify about the magic values necessary for interfacing with this contract.\n     * @param names An array of names for the magic values used by the contract.\n     * @param values An array of values for the magic values used by the contract.\n     */\n    event MagicValues(bytes32[] names, bytes32[] values);\n\n    /**\n     * Event emitted to notify about the creation of a SKU.\n     * @param sku The identifier of the created SKU.\n     * @param totalSupply The initial total supply for sale.\n     * @param maxQuantityPerPurchase The maximum allowed quantity for a single purchase.\n     * @param notificationsReceiver If not the zero address, the address of a contract on which `onPurchaseNotificationReceived` will be called after each purchase,\n     *  If this is the zero address, the call is not enabled.\n     */\n    event SkuCreation(bytes32 sku, uint256 totalSupply, uint256 maxQuantityPerPurchase, address notificationsReceiver);\n\n    /**\n     * Event emitted to notify about a change in the pricing of a SKU.\n     * @dev `tokens` and `prices` arrays MUST have the same length.\n     * @param sku The identifier of the updated SKU.\n     * @param tokens An array of updated payment tokens. If empty, interpret as all payment tokens being disabled.\n     * @param prices An array of updated prices for each of the payment tokens.\n     *  Zero price values are used for payment tokens being disabled.\n     */\n    event SkuPricingUpdate(bytes32 indexed sku, address[] tokens, uint256[] prices);\n\n    /**\n     * Event emitted to notify about a purchase.\n     * @param purchaser The initiater and buyer of the purchase.\n     * @param recipient The recipient of the purchase.\n     * @param token The token used as the currency for the payment.\n     * @param sku The identifier of the purchased SKU.\n     * @param quantity The purchased quantity.\n     * @param userData Optional extra user input data.\n     * @param totalPrice The amount of `token` paid.\n     * @param pricingData Implementation-specific extra pricing data, such as details about discounts applied.\n     * @param paymentData Implementation-specific extra payment data, such as conversion rates.\n     * @param deliveryData Implementation-specific extra delivery data, such as purchase receipts.\n     */\n    event Purchase(\n        address indexed purchaser,\n        address recipient,\n        address indexed token,\n        bytes32 indexed sku,\n        uint256 quantity,\n        bytes userData,\n        uint256 totalPrice,\n        bytes32[] pricingData,\n        bytes32[] paymentData,\n        bytes32[] deliveryData\n    );\n\n    /**\n     * Returns the magic value used to represent the ETH payment token.\n     * @dev MUST NOT be the zero address.\n     * @return the magic value used to represent the ETH payment token.\n     */\n    function TOKEN_ETH() external pure returns (address);\n\n    /**\n     * Returns the magic value used to represent an infinite, never-decreasing SKU's supply.\n     * @dev MUST NOT be zero.\n     * @return the magic value used to represent an infinite, never-decreasing SKU's supply.\n     */\n    function SUPPLY_UNLIMITED() external pure returns (uint256);\n\n    /**\n     * Performs a purchase.\n     * @dev Reverts if `token` is the address zero.\n     * @dev Reverts if `quantity` is zero.\n     * @dev Reverts if `quantity` is greater than the maximum purchase quantity.\n     * @dev Reverts if `quantity` is greater than the remaining supply.\n     * @dev Reverts if `sku` does not exist.\n     * @dev Reverts if `sku` exists but does not have a price set for `token`.\n     * @dev Emits the Purchase event.\n     * @param recipient The recipient of the purchase.\n     * @param token The token to use as the payment currency.\n     * @param sku The identifier of the SKU to purchase.\n     * @param quantity The quantity to purchase.\n     * @param userData Optional extra user input data.\n     */\n    function purchaseFor(\n        address payable recipient,\n        address token,\n        bytes32 sku,\n        uint256 quantity,\n        bytes calldata userData\n    ) external payable;\n\n    /**\n     * Estimates the computed final total amount to pay for a purchase, including any potential discount.\n     * @dev This function MUST compute the same price as `purchaseFor` would in identical conditions (same arguments, same point in time).\n     * @dev Reverts if `token` is the zero address.\n     * @dev Reverts if `quantity` is zero.\n     * @dev Reverts if `quantity` is greater than the maximum purchase quantity.\n     * @dev Reverts if `quantity` is greater than the remaining supply.\n     * @dev Reverts if `sku` does not exist.\n     * @dev Reverts if `sku` exists but does not have a price set for `token`.\n     * @param recipient The recipient of the purchase used to calculate the total price amount.\n     * @param token The payment token used to calculate the total price amount.\n     * @param sku The identifier of the SKU used to calculate the total price amount.\n     * @param quantity The quantity used to calculate the total price amount.\n     * @param userData Optional extra user input data.\n     * @return totalPrice The computed total price to pay.\n     * @return pricingData Implementation-specific extra pricing data, such as details about discounts applied.\n     *  If not empty, the implementer MUST document how to interepret the values.\n     */\n    function estimatePurchase(\n        address payable recipient,\n        address token,\n        bytes32 sku,\n        uint256 quantity,\n        bytes calldata userData\n    ) external view returns (uint256 totalPrice, bytes32[] memory pricingData);\n\n    /**\n     * Returns the information relative to a SKU.\n     * @dev WARNING: it is the responsibility of the implementer to ensure that the\n     *  number of payment tokens is bounded, so that this function does not run out of gas.\n     * @dev Reverts if `sku` does not exist.\n     * @param sku The SKU identifier.\n     * @return totalSupply The initial total supply for sale.\n     * @return remainingSupply The remaining supply for sale.\n     * @return maxQuantityPerPurchase The maximum allowed quantity for a single purchase.\n     * @return notificationsReceiver The address of a contract on which to call the `onPurchaseNotificationReceived` function.\n     * @return tokens The list of supported payment tokens.\n     * @return prices The list of associated prices for each of the `tokens`.\n     */\n    function getSkuInfo(bytes32 sku)\n        external\n        view\n        returns (\n            uint256 totalSupply,\n            uint256 remainingSupply,\n            uint256 maxQuantityPerPurchase,\n            address notificationsReceiver,\n            address[] memory tokens,\n            uint256[] memory prices\n        );\n\n    /**\n     * Returns the list of created SKU identifiers.\n     * @dev WARNING: it is the responsibility of the implementer to ensure that the\n     *  number of SKUs is bounded, so that this function does not run out of gas.\n     * @return skus the list of created SKU identifiers.\n     */\n    function getSkus() external view returns (bytes32[] memory skus);\n}\n"
    },
    "@animoca/ethereum-contracts-sale_base/contracts/sale/interfaces/IPurchaseNotificationsReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n\n/**\n * @title IPurchaseNotificationsReceiver\n * Interface for any contract that wants to support purchase notifications from a Sale contract.\n */\ninterface IPurchaseNotificationsReceiver {\n\n    /**\n     * Handles the receipt of a purchase notification.\n     * @dev This function MUST return the function selector, otherwise the caller will revert the transaction.\n     *  The selector to be returned can be obtained as `this.onPurchaseNotificationReceived.selector`\n     * @dev This function MAY throw.\n     * @param purchaser The purchaser of the purchase.\n     * @param recipient The recipient of the purchase.\n     * @param token The token to use as the payment currency.\n     * @param sku The identifier of the SKU to purchase.\n     * @param quantity The quantity to purchase.\n     * @param userData Optional extra user input data.\n     * @param totalPrice The total price paid.\n     * @param pricingData Implementation-specific extra pricing data, such as details about discounts applied.\n     * @param paymentData Implementation-specific extra payment data, such as conversion rates.\n     * @param deliveryData Implementation-specific extra delivery data, such as purchase receipts.\n     * @return `bytes4(keccak256(\"onPurchaseNotificationReceived(address,address,address,bytes32,uint256,bytes,uint256,bytes32[],bytes32[],bytes32[])\"))`\n     */\n    function onPurchaseNotificationReceived(\n        address purchaser,\n        address recipient,\n        address token,\n        bytes32 sku,\n        uint256 quantity,\n        bytes calldata userData,\n        uint256 totalPrice,\n        bytes32[] calldata pricingData,\n        bytes32[] calldata paymentData,\n        bytes32[] calldata deliveryData\n    ) external pure returns (bytes4);\n}\n"
    },
    "@animoca/ethereum-contracts-sale_base/contracts/sale/PurchaseLifeCycles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n\n/**\n * @title PurchaseLifeCycles\n * An abstract contract which define the life cycles for a purchase implementer.\n */\nabstract contract PurchaseLifeCycles {\n    /**\n     * Wrapper for the purchase data passed as argument to the life cycle functions and down to their step functions.\n     */\n    struct PurchaseData {\n        address payable purchaser;\n        address payable recipient;\n        address token;\n        bytes32 sku;\n        uint256 quantity;\n        bytes userData;\n        uint256 totalPrice;\n        bytes32[] pricingData;\n        bytes32[] paymentData;\n        bytes32[] deliveryData;\n    }\n\n    /*                                          Internal Life Cycle Functions                                         */\n\n    /**\n     * `estimatePurchase` lifecycle.\n     * @param purchase The purchase conditions.\n     */\n    function _estimatePurchase(PurchaseData memory purchase)\n        internal\n        virtual\n        view\n        returns (uint256 totalPrice, bytes32[] memory pricingData)\n    {\n        _validation(purchase);\n        _pricing(purchase);\n\n        totalPrice = purchase.totalPrice;\n        pricingData = purchase.pricingData;\n    }\n\n    /**\n     * `purchaseFor` lifecycle.\n     * @param purchase The purchase conditions.\n     */\n    function _purchaseFor(PurchaseData memory purchase) internal virtual {\n        _validation(purchase);\n        _pricing(purchase);\n        _payment(purchase);\n        _delivery(purchase);\n        _notification(purchase);\n    }\n\n    /*                               Internal Life Cycle Step Functions                               */\n\n    /**\n     * Lifecycle step which validates the purchase pre-conditions.\n     * @dev Responsibilities:\n     *  - Ensure that the purchase pre-conditions are met and revert if not.\n     * @param purchase The purchase conditions.\n     */\n    function _validation(PurchaseData memory purchase) internal virtual view;\n\n    /**\n     * Lifecycle step which computes the purchase price.\n     * @dev Responsibilities:\n     *  - Computes the pricing formula, including any discount logic and price conversion;\n     *  - Set the value of `purchase.totalPrice`;\n     *  - Add any relevant extra data related to pricing in `purchase.pricingData` and document how to interpret it.\n     * @param purchase The purchase conditions.\n     */\n    function _pricing(PurchaseData memory purchase) internal virtual view;\n\n    /**\n     * Lifecycle step which manages the transfer of funds from the purchaser.\n     * @dev Responsibilities:\n     *  - Ensure the payment reaches destination in the expected output token;\n     *  - Handle any token swap logic;\n     *  - Add any relevant extra data related to payment in `purchase.paymentData` and document how to interpret it.\n     * @param purchase The purchase conditions.\n     */\n    function _payment(PurchaseData memory purchase) internal virtual;\n\n    /**\n     * Lifecycle step which delivers the purchased SKUs to the recipient.\n     * @dev Responsibilities:\n     *  - Ensure the product is delivered to the recipient, if that is the contract's responsibility.\n     *  - Handle any internal logic related to the delivery, including the remaining supply update;\n     *  - Add any relevant extra data related to delivery in `purchase.deliveryData` and document how to interpret it.\n     * @param purchase The purchase conditions.\n     */\n    function _delivery(PurchaseData memory purchase) internal virtual;\n\n    /**\n     * Lifecycle step which notifies of the purchase.\n     * @dev Responsibilities:\n     *  - Manage after-purchase event(s) emission.\n     *  - Handle calls to the notifications receiver contract's `onPurchaseNotificationReceived` function, if applicable.\n     * @param purchase The purchase conditions.\n     */\n    function _notification(PurchaseData memory purchase) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/ERC20.sol": {
      "content": "/*\nhttps://github.com/OpenZeppelin/openzeppelin-contracts\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2019 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./IERC20Detailed.sol\";\nimport \"./IERC20Allowance.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\nabstract contract ERC20 is ERC165, Context, IERC20, IERC20Detailed, IERC20Allowance {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) internal _allowances;\n    uint256 internal _totalSupply;\n\n    constructor() internal {\n        _registerInterface(type(IERC20).interfaceId);\n        _registerInterface(type(IERC20Detailed).interfaceId);\n        _registerInterface(type(IERC20Allowance).interfaceId);\n\n        // ERC20Name interfaceId: bytes4(keccak256(\"name()\"))\n        _registerInterface(0x06fdde03);\n        // ERC20Symbol interfaceId: bytes4(keccak256(\"symbol()\"))\n        _registerInterface(0x95d89b41);\n        // ERC20Decimals interfaceId: bytes4(keccak256(\"decimals()\"))\n        _registerInterface(0x313ce567);\n    }\n\n/////////////////////////////////////////// ERC20 ///////////////////////////////////////\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n/////////////////////////////////////////// ERC20Allowance ///////////////////////////////////////\n\n    /**\n     * @dev See {IERC20Allowance-increaseAllowance}.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual override returns (bool)\n    {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20Allowance-decreaseAllowance}.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual override returns (bool)\n    {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n/////////////////////////////////////////// Internal Functions ///////////////////////////////////////\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n/////////////////////////////////////////// Hooks ///////////////////////////////////////\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/IERC20Detailed.sol": {
      "content": "/*\nhttps://github.com/OpenZeppelin/openzeppelin-contracts\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2019 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @dev Interface for commonly used additional ERC20 interfaces\n */\ninterface IERC20Detailed {\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/IERC20Allowance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @dev Interface for additional ERC20 allowance features\n */\ninterface IERC20Allowance {\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n}"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library-3/contracts/access/MinterRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * Contract module which allows derived contracts access control over token\n * minting operations.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyMinter`, which can be applied to the minting functions of your contract.\n * Those functions will only be accessible to accounts with the minter role\n * once the modifer is put in place.\n */\ncontract MinterRole is AccessControl {\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    /**\n     * Modifier to make a function callable only by accounts with the minter role.\n     */\n    modifier onlyMinter() {\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    /**\n     * Constructor.\n     */\n    constructor () internal {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        emit MinterAdded(_msgSender());\n    }\n\n    /**\n     * Validates whether or not the given account has been granted the minter role.\n     * @param account The account to validate.\n     * @return True if the account has been granted the minter role, false otherwise.\n     */\n    function isMinter(address account) public view returns (bool) {\n        require(account != address(0), \"MinterRole: address zero cannot be minter\");\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    /**\n     * Grants the minter role to a non-minter.\n     * @param account The account to grant the minter role to.\n     */\n    function addMinter(address account) public onlyMinter {\n        require(!isMinter(account), \"MinterRole: add an account already minter\");\n        grantRole(DEFAULT_ADMIN_ROLE, account);\n        emit MinterAdded(account);\n    }\n\n    /**\n     * Renounces the granted minter role.\n     */\n    function renounceMinter() public onlyMinter {\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        emit MinterRemoved(_msgSender());\n    }\n\n}\n"
    },
    "contracts/token/ERC20/REDP.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/ERC20WithOperators.sol\";\nimport \"@animoca/ethereum-contracts-core_library-3/contracts/access/MinterRole.sol\";\n\n/**\n * @title REDP\n */\ncontract REDP is ERC20WithOperators, MinterRole {\n    // solhint-disable-next-line const-name-snakecase\n    string public constant override name = \"REDP\";\n    // solhint-disable-next-line const-name-snakecase\n    string public constant override symbol = \"REDP\";\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant override decimals = 18;\n\n    function mint(address holder, uint256 amount) public onlyMinter {\n        _mint(holder, amount);\n    }\n\n    function batchMint(address[] memory holders, uint256[] memory amounts) public onlyMinter {\n        require(holders.length == amounts.length, \"REDP: inconsistent arrays\");\n        for (uint256 i = 0; i < holders.length; ++i) {\n            _mint(holders[i], amounts[i]);\n        }\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"REDP: not enough allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/ERC20WithOperators.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@animoca/ethereum-contracts-core_library/contracts/access/WhitelistedOperators.sol\";\nimport \"./ERC20.sol\";\n\nabstract contract ERC20WithOperators is ERC20, WhitelistedOperators {\n\n    /**\n     * NOTICE\n     * This override will allow *any* whitelisted operator to be able to\n     * transfer unresitricted amounts of ERC20WithOperators-based tokens from 'sender'\n     * to 'recipient'. Care must be taken to ensure to integrity of the\n     * whitelisted operator list.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        address msgSender = _msgSender();\n\n        // bypass the internal allowance manipulation and checks for the\n        // whitelisted operator (i.e. _msgSender()). as a side-effect, the\n        // 'Approval' event will not be emitted since the allowance was not\n        // updated.\n        if (!isOperator(msgSender)) {\n            _approve(sender, msgSender, allowance(sender, msgSender).sub(amount));\n        }\n\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public override view returns (uint256) {\n        if (isOperator(spender)) {\n            // allow the front-end to determine whether or not an approval is\n            // necessary, given that the whitelisted operator status of the\n            // spender is unknown. A call to WhitelistedOperators::isOperator()\n            // is more direct, but we want to expose a mechanism by which to\n            // check through the ERC20 interface.\n            return type(uint256).max;\n        } else {\n            return super.allowance(owner, spender);\n        }\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n        if (isOperator(spender)) {\n            // bypass the internal allowance manipulation and checks for the\n            // whitelisted operator (i.e. spender). as a side-effect, the\n            // 'Approval' event will not be emitted since the allowance was not\n            // updated.\n            return true;\n        } else {\n            return super.increaseAllowance(spender, addedValue);\n        }\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n        if (isOperator(spender)) {\n            // bypass the internal allowance manipulation and checks for the\n            // whitelisted operator (i.e. spender). as a side-effect, the\n            // 'Approval' event will not be emitted since the allowance was not\n            // updated.\n            return true;\n        } else {\n            return super.decreaseAllowance(spender, subtractedValue);\n        }\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal override {\n        if (isOperator(spender)) {\n            // bypass the internal allowance manipulation and checks for the\n            // whitelisted operator (i.e. spender). as a side-effect, the\n            // 'Approval' event will not be emitted since the allowance was not\n            // updated.\n            return;\n        } else {\n            super._approve(owner, spender, value);\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/access/WhitelistedOperators.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract WhitelistedOperators is Ownable {\n    mapping(address => bool) internal _whitelistedOperators;\n\n    event WhitelistedOperator(address operator, bool enabled);\n\n    /// @notice Enable or disable address operator access\n    /// @param operator address that will be given/removed operator right.\n    /// @param enabled set whether the operator is enabled or disabled.\n    function whitelistOperator(address operator, bool enabled) external onlyOwner {\n        _whitelistedOperators[operator] = enabled;\n        emit WhitelistedOperator(operator, enabled);\n    }\n\n    /// @notice check whether address `who` is given operator rights.\n    /// @param who The address to query.\n    /// @return whether the address is whitelisted operator\n    function isOperator(address who) public view returns (bool) {\n        return _whitelistedOperators[who];\n    }\n}\n"
    },
    "contracts/token/ERC20/REVV.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@animoca/ethereum-contracts-erc20_base/contracts/token/ERC20/ERC20WithOperators.sol\";\n\n/**\n * @title REVV\n */\ncontract REVV is ERC20WithOperators {\n    // solhint-disable-next-line const-name-snakecase\n    string public constant override name = \"REVV\";\n    // solhint-disable-next-line const-name-snakecase\n    string public constant override symbol = \"REVV\";\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant override decimals = 18;\n\n    constructor(address[] memory holders, uint256[] memory amounts) public ERC20WithOperators() {\n        require(holders.length == amounts.length, \"REVV: wrong arguments\");\n        for (uint256 i = 0; i < holders.length; ++i) {\n            _mint(holders[i], amounts[i]);\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/metadata/BaseMetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@animoca/ethereum-contracts-core_library/contracts/utils/types/UInt256ToDecimalString.sol\";\n\ncontract BaseMetadataURI is Ownable {\n    using UInt256ToDecimalString for uint256;\n\n    event BaseMetadataURISet(string baseMetadataURI);\n\n    string public baseMetadataURI;\n\n    function setBaseMetadataURI(string calldata baseMetadataURI_) external onlyOwner {\n        baseMetadataURI = baseMetadataURI_;\n        emit BaseMetadataURISet(baseMetadataURI_);\n    }\n\n    function _uri(uint256 id) internal view virtual returns (string memory) {\n        return string(abi.encodePacked(baseMetadataURI, id.toDecimalString()));\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/utils/types/UInt256ToDecimalString.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nlibrary UInt256ToDecimalString {\n    function toDecimalString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OpenZeppelin's String.toString() implementation - MIT licence\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8b10cb38d8fedf34f2d89b0ed604f2dceb76d6a9/contracts/utils/Strings.sol\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/token/ERC1155721/REVVInventory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.8;\n\nimport \"@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/ERC1155721InventoryBurnable.sol\";\nimport \"@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/IERC1155721InventoryMintable.sol\";\nimport \"@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155InventoryCreator.sol\";\nimport \"@animoca/ethereum-contracts-assets_inventory/contracts/metadata/BaseMetadataURI.sol\";\nimport \"@animoca/ethereum-contracts-core_library/contracts/access/MinterRole.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\ncontract REVVInventory is\n    Ownable,\n    Pausable,\n    ERC1155721InventoryBurnable,\n    IERC1155721InventoryMintable,\n    IERC1155InventoryCreator,\n    BaseMetadataURI,\n    MinterRole\n{\n    // solhint-disable-next-line const-name-snakecase\n    string public constant override name = \"REVV Inventory\";\n    // solhint-disable-next-line const-name-snakecase\n    string public constant override symbol = \"REVV-I\";\n\n    //================================== ERC1155MetadataURI =======================================/\n\n    /// @dev See {IERC1155MetadataURI-uri(uint256)}.\n    function uri(uint256 id) public view virtual override returns (string memory) {\n        return _uri(id);\n    }\n\n    //================================== ERC1155InventoryCreator =======================================/\n\n    /// @dev See {IERC1155InventoryCreator-creator(uint256)}.\n    function creator(uint256 collectionId) external view override returns (address) {\n        return _creator(collectionId);\n    }\n\n    // ===================================================================================================\n    //                               Admin Public Functions\n    // ===================================================================================================\n\n    //================================== Pausable =======================================/\n\n    function pause() external virtual {\n        require(owner() == _msgSender(), \"Inventory: not the owner\");\n        _pause();\n    }\n\n    function unpause() external virtual {\n        require(owner() == _msgSender(), \"Inventory: not the owner\");\n        _unpause();\n    }\n\n    //================================== ERC1155Inventory =======================================/\n\n    /**\n     * Creates a collection.\n     * @dev Reverts if `collectionId` does not represent a collection.\n     * @dev Reverts if `collectionId` has already been created.\n     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\n     * @param collectionId Identifier of the collection.\n     */\n    function createCollection(uint256 collectionId) external onlyOwner {\n        _createCollection(collectionId);\n    }\n\n    //================================== ERC1155721InventoryMintable =======================================/\n\n    /**\n     * Unsafely mints a Non-Fungible Token (ERC721-compatible).\n     * @dev See {IERC1155721InventoryMintable-batchMint(address,uint256)}.\n     */\n    function mint(address to, uint256 nftId) public virtual override {\n        require(isMinter(_msgSender()), \"Inventory: not a minter\");\n        _mint(to, nftId, \"\", false);\n    }\n\n    /**\n     * Unsafely mints a batch of Non-Fungible Tokens (ERC721-compatible).\n     * @dev See {IERC1155721InventoryMintable-batchMint(address,uint256[])}.\n     */\n    function batchMint(address to, uint256[] memory nftIds) public virtual override {\n        require(isMinter(_msgSender()), \"Inventory: not a minter\");\n        _batchMint(to, nftIds);\n    }\n\n    /**\n     * Safely mints a Non-Fungible Token (ERC721-compatible).\n     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,bytes)}.\n     */\n    function safeMint(\n        address to,\n        uint256 nftId,\n        bytes memory data\n    ) public virtual override {\n        require(isMinter(_msgSender()), \"Inventory: not a minter\");\n        _mint(to, nftId, data, true);\n    }\n\n    /**\n     * Safely mints some token (ERC1155-compatible).\n     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,uint256,bytes)}.\n     */\n    function safeMint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public virtual override {\n        require(isMinter(_msgSender()), \"Inventory: not a minter\");\n        _safeMint(to, id, value, data);\n    }\n\n    /**\n     * Safely mints a batch of tokens (ERC1155-compatible).\n     * @dev See {IERC1155721InventoryMintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n     */\n    function safeBatchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual override {\n        require(isMinter(_msgSender()), \"Inventory: not a minter\");\n        _safeBatchMint(to, ids, values, data);\n    }\n\n    //================================== ERC721 =======================================/\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 nftId\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.transferFrom(from, to, nftId);\n    }\n\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory nftIds\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.batchTransferFrom(from, to, nftIds);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 nftId\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.safeTransferFrom(from, to, nftId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 nftId,\n        bytes memory data\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.safeTransferFrom(from, to, nftId, data);\n    }\n\n    function batchBurnFrom(address from, uint256[] memory nftIds) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.batchBurnFrom(from, nftIds);\n    }\n\n    //================================== ERC1155 =======================================/\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.safeTransferFrom(from, to, id, value, data);\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    function burnFrom(\n        address from,\n        uint256 id,\n        uint256 value\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.burnFrom(from, id, value);\n    }\n\n    function batchBurnFrom(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual override {\n        require(!paused(), \"Inventory: paused\");\n        super.batchBurnFrom(from, ids, values);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/ERC1155721InventoryBurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"./ERC1155721Inventory.sol\";\nimport \"./IERC1155721InventoryBurnable.sol\";\n\n/**\n * @title ERC1155721InventoryBurnable, a burnable ERC1155721Inventory.\n */\nabstract contract ERC1155721InventoryBurnable is IERC1155721InventoryBurnable, ERC1155721Inventory {\n    //============================== ERC1155721InventoryBurnable =======================================/\n\n    /**\n     * Burns some token (ERC1155-compatible).\n     * @dev See {IERC1155721InventoryBurnable-burnFrom(address,uint256,uint256)}.\n     */\n    function burnFrom(\n        address from,\n        uint256 id,\n        uint256 value\n    ) public virtual override {\n        address sender = _msgSender();\n        bool operatable = _isOperatable(from, sender);\n\n        if (id.isFungibleToken()) {\n            _burnFungible(from, id, value, operatable);\n        } else if (id.isNonFungibleToken()) {\n            _burnNFT(from, id, value, operatable, false);\n            emit Transfer(from, address(0), id);\n        } else {\n            revert(\"Inventory: not a token id\");\n        }\n\n        emit TransferSingle(sender, from, address(0), id, value);\n    }\n\n    /**\n     * Burns a batch of token (ERC1155-compatible).\n     * @dev See {IERC1155721InventoryBurnable-batchBurnFrom(address,uint256[],uint256[])}.\n     */\n    function batchBurnFrom(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual override {\n        uint256 length = ids.length;\n        require(length == values.length, \"Inventory: inconsistent arrays\");\n\n        address sender = _msgSender();\n        bool operatable = _isOperatable(from, sender);\n\n        uint256 nfCollectionId;\n        uint256 nfCollectionCount;\n        uint256 nftsCount;\n        for (uint256 i; i != length; ++i) {\n            uint256 id = ids[i];\n            if (id.isFungibleToken()) {\n                _burnFungible(from, id, values[i], operatable);\n            } else if (id.isNonFungibleToken()) {\n                _burnNFT(from, id, values[i], operatable, true);\n                emit Transfer(from, address(0), id);\n                uint256 nextCollectionId = id.getNonFungibleCollection();\n                if (nfCollectionId == 0) {\n                    nfCollectionId = nextCollectionId;\n                    nfCollectionCount = 1;\n                } else {\n                    if (nextCollectionId != nfCollectionId) {\n                        _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n                        nfCollectionId = nextCollectionId;\n                        nftsCount += nfCollectionCount;\n                        nfCollectionCount = 1;\n                    } else {\n                        ++nfCollectionCount;\n                    }\n                }\n            } else {\n                revert(\"Inventory: not a token id\");\n            }\n        }\n\n        if (nfCollectionId != 0) {\n            _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n            nftsCount += nfCollectionCount;\n            // cannot underflow as balance is verified through ownership\n            _nftBalances[from] -= nftsCount;\n        }\n\n        emit TransferBatch(sender, from, address(0), ids, values);\n    }\n\n    /**\n     * Burns a batch of token (ERC721-compatible).\n     * @dev See {IERC1155721InventoryBurnable-batchBurnFrom(address,uint256[])}.\n     */\n    function batchBurnFrom(address from, uint256[] memory nftIds) public virtual override {\n        address sender = _msgSender();\n        bool operatable = _isOperatable(from, sender);\n\n        uint256 length = nftIds.length;\n        uint256[] memory values = new uint256[](length);\n\n        uint256 nfCollectionId;\n        uint256 nfCollectionCount;\n        for (uint256 i; i != length; ++i) {\n            uint256 nftId = nftIds[i];\n            values[i] = 1;\n            _burnNFT(from, nftId, values[i], operatable, true);\n            emit Transfer(from, address(0), nftId);\n            uint256 nextCollectionId = nftId.getNonFungibleCollection();\n            if (nfCollectionId == 0) {\n                nfCollectionId = nextCollectionId;\n                nfCollectionCount = 1;\n            } else {\n                if (nextCollectionId != nfCollectionId) {\n                    _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n                    nfCollectionId = nextCollectionId;\n                    nfCollectionCount = 1;\n                } else {\n                    ++nfCollectionCount;\n                }\n            }\n        }\n\n        if (nfCollectionId != 0) {\n            _burnNFTUpdateCollection(from, nfCollectionId, nfCollectionCount);\n            _nftBalances[from] -= length;\n        }\n\n        emit TransferBatch(sender, from, address(0), nftIds, values);\n    }\n\n    //============================== Internal Helper Functions =======================================/\n\n    function _burnFungible(\n        address from,\n        uint256 id,\n        uint256 value,\n        bool operatable\n    ) internal {\n        require(value != 0, \"Inventory: zero value\");\n        require(operatable, \"Inventory: non-approved sender\");\n        uint256 balance = _balances[id][from];\n        require(balance >= value, \"Inventory: not enough balance\");\n        _balances[id][from] = balance - value;\n        // Cannot underflow\n        _supplies[id] -= value;\n    }\n\n    function _burnNFT(\n        address from,\n        uint256 id,\n        uint256 value,\n        bool operatable,\n        bool isBatch\n    ) internal virtual {\n        require(value == 1, \"Inventory: wrong NFT value\");\n        uint256 owner = _owners[id];\n        require(from == address(owner), \"Inventory: non-owned NFT\");\n        if (!operatable) {\n            require((owner & _APPROVAL_BIT_TOKEN_OWNER_ != 0) && _msgSender() == _nftApprovals[id], \"Inventory: non-approved sender\");\n        }\n        _owners[id] = _BURNT_NFT_OWNER;\n\n        if (!isBatch) {\n            _burnNFTUpdateCollection(from, id.getNonFungibleCollection(), 1);\n\n            // cannot underflow as balance is verified through NFT ownership\n            --_nftBalances[from];\n        }\n    }\n\n    function _burnNFTUpdateCollection(\n        address from,\n        uint256 collectionId,\n        uint256 amount\n    ) internal virtual {\n        // cannot underflow as balance is verified through NFT ownership\n        _balances[collectionId][from] -= amount;\n        _supplies[collectionId] -= amount;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/IERC1155721InventoryMintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title IERC1155721InventoryMintable interface.\n * The function {IERC721Mintable-safeMint(address,uint256,bytes)} is not provided as\n *  {IERC1155Mintable-safeMint(address,uint256,uint256,bytes)} can be used instead.\n */\ninterface IERC1155721InventoryMintable {\n    /**\n     * Safely mints some token (ERC1155-compatible).\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if `id` is not a token.\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\n     * @dev Reverts if `id` represents a non-fungible token which has already been minted.\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\n     * @dev Reverts if `id` represents a fungible token and there is an overflow of supply.\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails or is refused.\n     * @dev Emits an {IERC721-Transfer} event from the zero address if `id` represents a non-fungible token.\n     * @dev Emits an {IERC1155-TransferSingle} event from the zero address.\n     * @param to Address of the new token owner.\n     * @param id Identifier of the token to mint.\n     * @param value Amount of token to mint.\n     * @param data Optional data to send along to a receiver contract.\n     */\n    function safeMint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external;\n\n    /**\n     * Safely mints a batch of tokens (ERC1155-compatible).\n     * @dev Reverts if `ids` and `values` have different lengths.\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if one of `ids` is not a token.\n     * @dev Reverts if one of `ids` represents a non-fungible token and its paired value is not 1.\n     * @dev Reverts if one of `ids` represents a non-fungible token which has already been minted.\n     * @dev Reverts if one of `ids` represents a fungible token and its paired value is 0.\n     * @dev Reverts if one of `ids` represents a fungible token and there is an overflow of supply.\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\n     * @dev Emits an {IERC721-Transfer} event from the zero address for each non-fungible token minted.\n     * @dev Emits an {IERC1155-TransferBatch} event from the zero address.\n     * @param to Address of the new tokens owner.\n     * @param ids Identifiers of the tokens to mint.\n     * @param values Amounts of tokens to mint.\n     * @param data Optional data to send along to a receiver contract.\n     */\n    function safeBatchMint(\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n\n    /**\n     * Unsafely mints a Non-Fungible Token (ERC721-compatible).\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if `nftId` does not represent a non-fungible token.\n     * @dev Reverts if `nftId` has already been minted.\n     * @dev Emits an {IERC721-Transfer} event from the zero address.\n     * @dev Emits an {IERC1155-TransferSingle} event from the zero address.\n     * @dev If `to` is a contract and supports ERC1155TokenReceiver, calls {IERC1155TokenReceiver-onERC1155Received} with empty data.\n     * @param to Address of the new token owner.\n     * @param nftId Identifier of the token to mint.\n     */\n    function mint(address to, uint256 nftId) external;\n\n    /**\n     * Unsafely mints a batch of Non-Fungible Tokens (ERC721-compatible).\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if one of `nftIds` does not represent a non-fungible token.\n     * @dev Reverts if one of `nftIds` has already been minted.\n     * @dev Emits an {IERC721-Transfer} event from the zero address for each of `nftIds`.\n     * @dev Emits an {IERC1155-TransferBatch} event from the zero address.\n     * @dev If `to` is a contract and supports ERC1155TokenReceiver, calls {IERC1155TokenReceiver-onERC1155BatchReceived} with empty data.\n     * @param to Address of the new token owner.\n     * @param nftIds Identifiers of the tokens to mint.\n     */\n    function batchMint(address to, uint256[] calldata nftIds) external;\n\n    /**\n     * Safely mints a token (ERC721-compatible).\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if `tokenId` has already ben minted.\n     * @dev Reverts if `to` is a contract which does not implement IERC721Receiver or IERC1155TokenReceiver.\n     * @dev Reverts if `to` is an IERC1155TokenReceiver or IERC721TokenReceiver contract which refuses the transfer.\n     * @dev Emits an {IERC721-Transfer} event from the zero address.\n     * @dev Emits an {IERC1155-TransferSingle} event from the zero address.\n     * @param to Address of the new token owner.\n     * @param nftId Identifier of the token to mint.\n     * @param data Optional data to pass along to the receiver call.\n     */\n    function safeMint(\n        address to,\n        uint256 nftId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155InventoryCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC-1155 Inventory, additional creator interface\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\n */\ninterface IERC1155InventoryCreator {\n    /**\n     * Returns the creator of a collection, or the zero address if the collection has not been created.\n     * @dev Reverts if `collectionId` does not represent a collection.\n     * @param collectionId Identifier of the collection.\n     * @return The creator of a collection, or the zero address if the collection has not been created.\n     */\n    function creator(uint256 collectionId) external view returns (address);\n}\n"
    },
    "@animoca/ethereum-contracts-core_library/contracts/access/MinterRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * Contract module which allows derived contracts access control over token\n * minting operations.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyMinter`, which can be applied to the minting functions of your contract.\n * Those functions will only be accessible to accounts with the minter role\n * once the modifer is put in place.\n */\ncontract MinterRole is AccessControl {\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    /**\n     * Modifier to make a function callable only by accounts with the minter role.\n     */\n    modifier onlyMinter() {\n        require(isMinter(_msgSender()), \"MinterRole: not a Minter\");\n        _;\n    }\n\n    /**\n     * Constructor.\n     */\n    constructor() internal {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        emit MinterAdded(_msgSender());\n    }\n\n    /**\n     * Validates whether or not the given account has been granted the minter role.\n     * @param account The account to validate.\n     * @return True if the account has been granted the minter role, false otherwise.\n     */\n    function isMinter(address account) public view returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    /**\n     * Grants the minter role to a non-minter.\n     * @param account The account to grant the minter role to.\n     */\n    function addMinter(address account) public onlyMinter {\n        require(!isMinter(account), \"MinterRole: already Minter\");\n        grantRole(DEFAULT_ADMIN_ROLE, account);\n        emit MinterAdded(account);\n    }\n\n    /**\n     * Renounces the granted minter role.\n     */\n    function renounceMinter() public onlyMinter {\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        emit MinterRemoved(_msgSender());\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/ERC1155721Inventory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./../ERC721/IERC721.sol\";\nimport \"./../ERC721/IERC721Metadata.sol\";\nimport \"./../ERC721/IERC721BatchTransfer.sol\";\nimport \"./../ERC721/IERC721Receiver.sol\";\nimport \"./../ERC1155/ERC1155InventoryBase.sol\";\n\n/**\n * @title ERC1155721Inventory, an ERC1155Inventory with additional support for ERC721.\n */\nabstract contract ERC1155721Inventory is IERC721, IERC721Metadata, IERC721BatchTransfer, ERC1155InventoryBase {\n    using Address for address;\n\n    bytes4 private constant _ERC165_INTERFACE_ID = type(IERC165).interfaceId;\n    bytes4 private constant _ERC1155_TOKEN_RECEIVER_INTERFACE_ID = type(IERC1155TokenReceiver).interfaceId;\n    bytes4 private constant _ERC721_INTERFACE_ID = type(IERC721).interfaceId;\n    bytes4 private constant _ERC721_METADATA_INTERFACE_ID = type(IERC721Metadata).interfaceId;\n\n    bytes4 internal constant _ERC721_RECEIVED = type(IERC721Receiver).interfaceId;\n\n    uint256 internal constant _APPROVAL_BIT_TOKEN_OWNER_ = 1 << 160;\n\n    /* owner => NFT balance */\n    mapping(address => uint256) internal _nftBalances;\n\n    /* NFT ID => operator */\n    mapping(uint256 => address) internal _nftApprovals;\n\n    /// @dev See {IERC165-supportsInterface(bytes4)}.\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == _ERC721_INTERFACE_ID || interfaceId == _ERC721_METADATA_INTERFACE_ID;\n    }\n\n    //===================================== ERC721 ==========================================/\n\n    /// @dev See {IERC721-balanceOf(address)}.\n    function balanceOf(address tokenOwner) external view virtual override returns (uint256) {\n        require(tokenOwner != address(0), \"Inventory: zero address\");\n        return _nftBalances[tokenOwner];\n    }\n\n    /// @dev See {IERC721-ownerOf(uint256)} and {IERC1155Inventory-ownerOf(uint256)}.\n    function ownerOf(uint256 nftId) public view virtual override(IERC721, ERC1155InventoryBase) returns (address) {\n        return ERC1155InventoryBase.ownerOf(nftId);\n    }\n\n    /// @dev See {IERC721-approve(address,uint256)}.\n    function approve(address to, uint256 nftId) external virtual override {\n        address tokenOwner = ownerOf(nftId);\n        require(to != tokenOwner, \"Inventory: self-approval\");\n        require(_isOperatable(tokenOwner, _msgSender()), \"Inventory: non-approved sender\");\n        _owners[nftId] = uint256(tokenOwner) | _APPROVAL_BIT_TOKEN_OWNER_;\n        _nftApprovals[nftId] = to;\n        emit Approval(tokenOwner, to, nftId);\n    }\n\n    /// @dev See {IERC721-getApproved(uint256)}.\n    function getApproved(uint256 nftId) external view virtual override returns (address) {\n        uint256 tokenOwner = _owners[nftId];\n        require(address(tokenOwner) != address(0), \"Inventory: non-existing NFT\");\n        if (tokenOwner & _APPROVAL_BIT_TOKEN_OWNER_ != 0) {\n            return _nftApprovals[nftId];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @dev See {IERC721-isApprovedForAll(address,address)} and {IERC1155-isApprovedForAll(address,address)}\n    function isApprovedForAll(address tokenOwner, address operator) public view virtual override(IERC721, ERC1155InventoryBase) returns (bool) {\n        return ERC1155InventoryBase.isApprovedForAll(tokenOwner, operator);\n    }\n\n    /// @dev See {IERC721-isApprovedForAll(address,address)} and {IERC1155-isApprovedForAll(address,address)}\n    function setApprovalForAll(address operator, bool approved) public virtual override(IERC721, ERC1155InventoryBase) {\n        return ERC1155InventoryBase.setApprovalForAll(operator, approved);\n    }\n\n    /**\n     * Unsafely transfers a Non-Fungible Token (ERC721-compatible).\n     * @dev See {IERC1155721Inventory-transferFrom(address,address,uint256)}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 nftId\n    ) public virtual override {\n        _transferFrom(\n            from,\n            to,\n            nftId,\n            \"\",\n            /* safe */\n            false\n        );\n    }\n\n    /**\n     * Safely transfers a Non-Fungible Token (ERC721-compatible).\n     * @dev See {IERC1155721Inventory-safeTransferFrom(address,address,uint256)}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 nftId\n    ) public virtual override {\n        _transferFrom(\n            from,\n            to,\n            nftId,\n            \"\",\n            /* safe */\n            true\n        );\n    }\n\n    /**\n     * Safely transfers a Non-Fungible Token (ERC721-compatible).\n     * @dev See {IERC1155721Inventory-safeTransferFrom(address,address,uint256,bytes)}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 nftId,\n        bytes memory data\n    ) public virtual override {\n        _transferFrom(\n            from,\n            to,\n            nftId,\n            data,\n            /* safe */\n            true\n        );\n    }\n\n    /**\n     * Unsafely transfers a batch of Non-Fungible Tokens (ERC721-compatible).\n     * @dev See {IERC1155721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n     */\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory nftIds\n    ) public virtual override {\n        require(to != address(0), \"Inventory: transfer to zero\");\n        address sender = _msgSender();\n        bool operatable = _isOperatable(from, sender);\n\n        uint256 length = nftIds.length;\n        uint256[] memory values = new uint256[](length);\n\n        uint256 nfCollectionId;\n        uint256 nfCollectionCount;\n        for (uint256 i; i != length; ++i) {\n            uint256 nftId = nftIds[i];\n            values[i] = 1;\n            _transferNFT(from, to, nftId, 1, operatable, true);\n            emit Transfer(from, to, nftId);\n            uint256 nextCollectionId = nftId.getNonFungibleCollection();\n            if (nfCollectionId == 0) {\n                nfCollectionId = nextCollectionId;\n                nfCollectionCount = 1;\n            } else {\n                if (nextCollectionId != nfCollectionId) {\n                    _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n                    nfCollectionId = nextCollectionId;\n                    nfCollectionCount = 1;\n                } else {\n                    ++nfCollectionCount;\n                }\n            }\n        }\n\n        if (nfCollectionId != 0) {\n            _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n            _transferNFTUpdateBalances(from, to, length);\n        }\n\n        emit TransferBatch(_msgSender(), from, to, nftIds, values);\n        if (to.isContract() && _isERC1155TokenReceiver(to)) {\n            _callOnERC1155BatchReceived(from, to, nftIds, values, \"\");\n        }\n    }\n\n    /// @dev See {IERC721Metadata-tokenURI(uint256)}.\n    function tokenURI(uint256 nftId) external view virtual override returns (string memory) {\n        require(address(_owners[nftId]) != address(0), \"Inventory: non-existing NFT\");\n        return uri(nftId);\n    }\n\n    //================================== ERC1155 =======================================/\n\n    /**\n     * Safely transfers some token (ERC1155-compatible).\n     * @dev See {IERC1155721Inventory-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public virtual override {\n        address sender = _msgSender();\n        require(to != address(0), \"Inventory: transfer to zero\");\n        bool operatable = _isOperatable(from, sender);\n\n        if (id.isFungibleToken()) {\n            _transferFungible(from, to, id, value, operatable);\n        } else if (id.isNonFungibleToken()) {\n            _transferNFT(from, to, id, value, operatable, false);\n            emit Transfer(from, to, id);\n        } else {\n            revert(\"Inventory: not a token id\");\n        }\n\n        emit TransferSingle(sender, from, to, id, value);\n        if (to.isContract()) {\n            _callOnERC1155Received(from, to, id, value, data);\n        }\n    }\n\n    /**\n     * Safely transfers a batch of tokens (ERC1155-compatible).\n     * @dev See {IERC1155721Inventory-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual override {\n        // internal function to avoid stack too deep error\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    //================================== ERC1155MetadataURI =======================================/\n\n    /// @dev See {IERC1155MetadataURI-uri(uint256)}.\n    function uri(uint256) public view virtual override returns (string memory);\n\n    //================================== ABI-level Internal Functions =======================================/\n\n    /**\n     * Safely or unsafely transfers some token (ERC721-compatible).\n     * @dev For `safe` transfer, see {IERC1155721Inventory-transferFrom(address,address,uint256)}.\n     * @dev For un`safe` transfer, see {IERC1155721Inventory-safeTransferFrom(address,address,uint256,bytes)}.\n     */\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 nftId,\n        bytes memory data,\n        bool safe\n    ) internal {\n        require(to != address(0), \"Inventory: transfer to zero\");\n        address sender = _msgSender();\n        bool operatable = _isOperatable(from, sender);\n\n        _transferNFT(from, to, nftId, 1, operatable, false);\n\n        emit Transfer(from, to, nftId);\n        emit TransferSingle(sender, from, to, nftId, 1);\n        if (to.isContract()) {\n            if (_isERC1155TokenReceiver(to)) {\n                _callOnERC1155Received(from, to, nftId, 1, data);\n            } else if (safe) {\n                _callOnERC721Received(from, to, nftId, data);\n            }\n        }\n    }\n\n    /**\n     * Safely transfers a batch of tokens (ERC1155-compatible).\n     * @dev See {IERC1155721Inventory-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        require(to != address(0), \"Inventory: transfer to zero\");\n        uint256 length = ids.length;\n        require(length == values.length, \"Inventory: inconsistent arrays\");\n        address sender = _msgSender();\n        bool operatable = _isOperatable(from, sender);\n\n        uint256 nfCollectionId;\n        uint256 nfCollectionCount;\n        uint256 nftsCount;\n        for (uint256 i; i != length; ++i) {\n            uint256 id = ids[i];\n            if (id.isFungibleToken()) {\n                _transferFungible(from, to, id, values[i], operatable);\n            } else if (id.isNonFungibleToken()) {\n                _transferNFT(from, to, id, values[i], operatable, true);\n                emit Transfer(from, to, id);\n                uint256 nextCollectionId = id.getNonFungibleCollection();\n                if (nfCollectionId == 0) {\n                    nfCollectionId = nextCollectionId;\n                    nfCollectionCount = 1;\n                } else {\n                    if (nextCollectionId != nfCollectionId) {\n                        _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n                        nfCollectionId = nextCollectionId;\n                        nftsCount += nfCollectionCount;\n                        nfCollectionCount = 1;\n                    } else {\n                        ++nfCollectionCount;\n                    }\n                }\n            } else {\n                revert(\"Inventory: not a token id\");\n            }\n        }\n\n        if (nfCollectionId != 0) {\n            _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\n            nftsCount += nfCollectionCount;\n            _transferNFTUpdateBalances(from, to, nftsCount);\n        }\n\n        emit TransferBatch(_msgSender(), from, to, ids, values);\n        if (to.isContract()) {\n            _callOnERC1155BatchReceived(from, to, ids, values, data);\n        }\n    }\n\n    /**\n     * Safely or unsafely mints some token (ERC721-compatible).\n     * @dev For `safe` mint, see {IERC1155721InventoryMintable-mint(address,uint256)}.\n     * @dev For un`safe` mint, see {IERC1155721InventoryMintable-safeMint(address,uint256,bytes)}.\n     */\n    function _mint(\n        address to,\n        uint256 nftId,\n        bytes memory data,\n        bool safe\n    ) internal {\n        require(to != address(0), \"Inventory: transfer to zero\");\n        require(nftId.isNonFungibleToken(), \"Inventory: not an NFT\");\n\n        _mintNFT(to, nftId, 1, false);\n\n        emit Transfer(address(0), to, nftId);\n        emit TransferSingle(_msgSender(), address(0), to, nftId, 1);\n        if (to.isContract()) {\n            if (_isERC1155TokenReceiver(to)) {\n                _callOnERC1155Received(address(0), to, nftId, 1, data);\n            } else if (safe) {\n                _callOnERC721Received(address(0), to, nftId, data);\n            }\n        }\n    }\n\n    /**\n     * Unsafely mints a batch of Non-Fungible Tokens (ERC721-compatible).\n     * @dev See {IERC1155721InventoryMintable-batchMint(address,uint256[])}.\n     */\n    function _batchMint(address to, uint256[] memory nftIds) internal {\n        require(to != address(0), \"Inventory: transfer to zero\");\n\n        uint256 length = nftIds.length;\n        uint256[] memory values = new uint256[](length);\n\n        uint256 nfCollectionId;\n        uint256 nfCollectionCount;\n        for (uint256 i; i != length; ++i) {\n            uint256 nftId = nftIds[i];\n            require(nftId.isNonFungibleToken(), \"Inventory: not an NFT\");\n            values[i] = 1;\n            _mintNFT(to, nftId, 1, true);\n            emit Transfer(address(0), to, nftId);\n            uint256 nextCollectionId = nftId.getNonFungibleCollection();\n            if (nfCollectionId == 0) {\n                nfCollectionId = nextCollectionId;\n                nfCollectionCount = 1;\n            } else {\n                if (nextCollectionId != nfCollectionId) {\n                    _balances[nfCollectionId][to] += nfCollectionCount;\n                    _supplies[nfCollectionId] += nfCollectionCount;\n                    nfCollectionId = nextCollectionId;\n                    nfCollectionCount = 1;\n                } else {\n                    ++nfCollectionCount;\n                }\n            }\n        }\n\n        _balances[nfCollectionId][to] += nfCollectionCount;\n        _supplies[nfCollectionId] += nfCollectionCount;\n        _nftBalances[to] += length;\n\n        emit TransferBatch(_msgSender(), address(0), to, nftIds, values);\n        if (to.isContract() && _isERC1155TokenReceiver(to)) {\n            _callOnERC1155BatchReceived(address(0), to, nftIds, values, \"\");\n        }\n    }\n\n    /**\n     * Safely mints some token (ERC1155-compatible).\n     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,uint256,bytes)}.\n     */\n    function _safeMint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"Inventory: transfer to zero\");\n        address sender = _msgSender();\n        if (id.isFungibleToken()) {\n            _mintFungible(to, id, value);\n        } else if (id.isNonFungibleToken()) {\n            _mintNFT(to, id, value, false);\n            emit Transfer(address(0), to, id);\n        } else {\n            revert(\"Inventory: not a token id\");\n        }\n\n        emit TransferSingle(sender, address(0), to, id, value);\n        if (to.isContract()) {\n            _callOnERC1155Received(address(0), to, id, value, data);\n        }\n    }\n\n    /**\n     * Safely mints a batch of tokens (ERC1155-compatible).\n     * @dev See {IERC1155721InventoryMintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n     */\n    function _safeBatchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"Inventory: transfer to zero\");\n        uint256 length = ids.length;\n        require(length == values.length, \"Inventory: inconsistent arrays\");\n\n        uint256 nfCollectionId;\n        uint256 nfCollectionCount;\n        uint256 nftsCount;\n        for (uint256 i; i != length; ++i) {\n            uint256 id = ids[i];\n            uint256 value = values[i];\n            if (id.isFungibleToken()) {\n                _mintFungible(to, id, value);\n            } else if (id.isNonFungibleToken()) {\n                _mintNFT(to, id, value, true);\n                emit Transfer(address(0), to, id);\n                uint256 nextCollectionId = id.getNonFungibleCollection();\n                if (nfCollectionId == 0) {\n                    nfCollectionId = nextCollectionId;\n                    nfCollectionCount = 1;\n                } else {\n                    if (nextCollectionId != nfCollectionId) {\n                        _balances[nfCollectionId][to] += nfCollectionCount;\n                        _supplies[nfCollectionId] += nfCollectionCount;\n                        nfCollectionId = nextCollectionId;\n                        nftsCount += nfCollectionCount;\n                        nfCollectionCount = 1;\n                    } else {\n                        ++nfCollectionCount;\n                    }\n                }\n            } else {\n                revert(\"Inventory: not a token id\");\n            }\n        }\n\n        if (nfCollectionId != 0) {\n            _balances[nfCollectionId][to] += nfCollectionCount;\n            _supplies[nfCollectionId] += nfCollectionCount;\n            nftsCount += nfCollectionCount;\n            _nftBalances[to] += nftsCount;\n        }\n\n        emit TransferBatch(_msgSender(), address(0), to, ids, values);\n        if (to.isContract()) {\n            _callOnERC1155BatchReceived(address(0), to, ids, values, data);\n        }\n    }\n\n    //============================== Internal Helper Functions =======================================/\n\n    function _mintFungible(\n        address to,\n        uint256 id,\n        uint256 value\n    ) internal {\n        require(value != 0, \"Inventory: zero value\");\n        uint256 supply = _supplies[id];\n        uint256 newSupply = supply + value;\n        require(newSupply > supply, \"Inventory: supply overflow\");\n        _supplies[id] = newSupply;\n        // cannot overflow as supply cannot overflow\n        _balances[id][to] += value;\n    }\n\n    function _mintNFT(\n        address to,\n        uint256 id,\n        uint256 value,\n        bool isBatch\n    ) internal {\n        require(value == 1, \"Inventory: wrong NFT value\");\n        require(_owners[id] == 0, \"Inventory: existing/burnt NFT\");\n\n        _owners[id] = uint256(to);\n\n        if (!isBatch) {\n            uint256 collectionId = id.getNonFungibleCollection();\n            // it is virtually impossible that a non-fungible collection supply\n            // overflows due to the cost of minting individual tokens\n            ++_supplies[collectionId];\n            ++_balances[collectionId][to];\n            ++_nftBalances[to];\n        }\n    }\n\n    function _transferFungible(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bool operatable\n    ) internal {\n        require(operatable, \"Inventory: non-approved sender\");\n        require(value != 0, \"Inventory: zero value\");\n        uint256 balance = _balances[id][from];\n        require(balance >= value, \"Inventory: not enough balance\");\n        if (from != to) {\n            _balances[id][from] = balance - value;\n            // cannot overflow as supply cannot overflow\n            _balances[id][to] += value;\n        }\n    }\n\n    function _transferNFT(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bool operatable,\n        bool isBatch\n    ) internal virtual {\n        require(value == 1, \"Inventory: wrong NFT value\");\n        uint256 owner = _owners[id];\n        require(from == address(owner), \"Inventory: non-owned NFT\");\n        if (!operatable) {\n            require((owner & _APPROVAL_BIT_TOKEN_OWNER_ != 0) && _msgSender() == _nftApprovals[id], \"Inventory: non-approved sender\");\n        }\n        _owners[id] = uint256(to);\n        if (!isBatch) {\n            _transferNFTUpdateBalances(from, to, 1);\n            _transferNFTUpdateCollection(from, to, id.getNonFungibleCollection(), 1);\n        }\n    }\n\n    function _transferNFTUpdateBalances(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if (from != to) {\n            // cannot underflow as balance is verified through ownership\n            _nftBalances[from] -= amount;\n            //  cannot overflow as supply cannot overflow\n            _nftBalances[to] += amount;\n        }\n    }\n\n    function _transferNFTUpdateCollection(\n        address from,\n        address to,\n        uint256 collectionId,\n        uint256 amount\n    ) internal virtual {\n        if (from != to) {\n            // cannot underflow as balance is verified through ownership\n            _balances[collectionId][from] -= amount;\n            // cannot overflow as supply cannot overflow\n            _balances[collectionId][to] += amount;\n        }\n    }\n\n    ///////////////////////////////////// Receiver Calls Internal /////////////////////////////////////\n\n    /**\n     * Queries whether a contract implements ERC1155TokenReceiver.\n     * @param _contract address of the contract.\n     * @return wheter the given contract implements ERC1155TokenReceiver.\n     */\n    function _isERC1155TokenReceiver(address _contract) internal view returns (bool) {\n        bool success;\n        bool result;\n        bytes memory staticCallData = abi.encodeWithSelector(_ERC165_INTERFACE_ID, _ERC1155_TOKEN_RECEIVER_INTERFACE_ID);\n        assembly {\n            let call_ptr := add(0x20, staticCallData)\n            let call_size := mload(staticCallData)\n            let output := mload(0x40) // Find empty storage location using \"free memory pointer\"\n            mstore(output, 0x0)\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\n            result := mload(output)\n        }\n        // (10000 / 63) \"not enough for supportsInterface(...)\" // consume all gas, so caller can potentially know that there was not enough gas\n        assert(gasleft() > 158);\n        return success && result;\n    }\n\n    /**\n     * Calls {IERC721Receiver-onERC721Received} on a target contract.\n     * @dev Reverts if `to` is not a contract.\n     * @dev Reverts if the call to the target fails or is refused.\n     * @param from Previous token owner.\n     * @param to New token owner.\n     * @param nftId Identifier of the token transferred.\n     * @param data Optional data to send along with the receiver contract call.\n     */\n    function _callOnERC721Received(\n        address from,\n        address to,\n        uint256 nftId,\n        bytes memory data\n    ) internal {\n        require(IERC721Receiver(to).onERC721Received(_msgSender(), from, nftId, data) == _ERC721_RECEIVED, \"Inventory: transfer refused\");\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155721/IERC1155721InventoryBurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title IERC1155721InventoryBurnable interface.\n * The function {IERC721Burnable-burnFrom(address,uint256)} is not provided as\n *  {IERC1155Burnable-burnFrom(address,uint256,uint256)} can be used instead.\n */\ninterface IERC1155721InventoryBurnable {\n    /**\n     * Burns some token (ERC1155-compatible).\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if `id` does not represent a token.\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\n     * @dev Reverts if `id` represents a fungible token and `value` is higher than `from`'s balance.\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\n     * @dev Reverts if `id` represents a non-fungible token which is not owned by `from`.\n     * @dev Emits an {IERC721-Transfer} event to the zero address if `id` represents a non-fungible token.\n     * @dev Emits an {IERC1155-TransferSingle} event to the zero address.\n     * @param from Address of the current token owner.\n     * @param id Identifier of the token to burn.\n     * @param value Amount of token to burn.\n     */\n    function burnFrom(\n        address from,\n        uint256 id,\n        uint256 value\n    ) external;\n\n    /**\n     * Burns multiple tokens (ERC1155-compatible).\n     * @dev Reverts if `ids` and `values` have different lengths.\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if one of `ids` does not represent a token.\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is higher than `from`'s balance.\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\n     * @dev Reverts if one of `ids` represents a non-fungible token which is not owned by `from`.\n     * @dev Emits an {IERC721-Transfer} event to the zero address for each burnt non-fungible token.\n     * @dev Emits an {IERC1155-TransferBatch} event to the zero address.\n     * @param from Address of the current tokens owner.\n     * @param ids Identifiers of the tokens to burn.\n     * @param values Amounts of tokens to burn.\n     */\n    function batchBurnFrom(\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) external;\n\n    /**\n     * Burns a batch of Non-Fungible Tokens (ERC721-compatible).\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if one of `nftIds` does not represent a non-fungible token.\n     * @dev Reverts if one of `nftIds` is not owned by `from`.\n     * @dev Emits an {IERC721-Transfer} event to the zero address for each of `nftIds`.\n     * @dev Emits an {IERC1155-TransferBatch} event to the zero address.\n     * @param from Current token owner.\n     * @param nftIds Identifiers of the tokens to transfer.\n     */\n    function batchBurnFrom(address from, uint256[] calldata nftIds) external;\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n * Note: The ERC-165 identifier for this interface is 0x5b5e139f.\n */\ninterface IERC721Metadata {\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     * @return string URI of given token ID\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/IERC721BatchTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC721 Non-Fungible Token Standard, optional unsafe batchTransfer interface\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n * Note: The ERC-165 identifier for this interface is.\n */\ninterface IERC721BatchTransfer {\n    /**\n     * Unsafely transfers a batch of tokens.\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if one of `tokenIds` is not owned by `from`.\n     * @dev Resets the token approval for each of `tokenIds`.\n     * @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n     * @param from Current tokens owner.\n     * @param to Address of the new token owner.\n     * @param tokenIds Identifiers of the tokens to transfer.\n     */\n    function batchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata tokenIds\n    ) external;\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n    @title ERC721 Non-Fungible Token Standard, token receiver\n    @dev See https://eips.ethereum.org/EIPS/eip-721\n    Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\n    Note: The ERC-165 identifier for this interface is 0x150b7a02.\n */\ninterface IERC721Receiver {\n    /**\n        @notice Handle the receipt of an NFT\n        @dev The ERC721 smart contract calls this function on the recipient\n        after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n        otherwise the caller will revert the transaction. The selector to be\n        returned can be obtained as `this.onERC721Received.selector`. This\n        function MAY throw to revert and reject the transfer.\n        Note: the ERC721 contract address is always the message sender.\n        @param operator The address which called `safeTransferFrom` function\n        @param from The address which previously owned the token\n        @param tokenId The NFT identifier which is being transferred\n        @param data Additional data with no specified format\n        @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/ERC1155InventoryBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC165.sol\";\nimport \"./../ERC1155/IERC1155.sol\";\nimport \"./../ERC1155/IERC1155MetadataURI.sol\";\nimport \"./../ERC1155/IERC1155Inventory.sol\";\nimport \"./../ERC1155/IERC1155TokenReceiver.sol\";\n\n/**\n * @title ERC1155InventoryIdentifiersLib, a library to introspect inventory identifiers.\n * @dev With N=32, representing the Non-Fungible Collection mask length, identifiers are represented as follow:\n * (a) a Fungible Token:\n *     - most significant bit == 0\n * (b) a Non-Fungible Collection:\n *     - most significant bit == 1\n *     - (256-N) least significant bits == 0\n * (c) a Non-Fungible Token:\n *     - most significant bit == 1\n *     - (256-N) least significant bits != 0\n */\nlibrary ERC1155InventoryIdentifiersLib {\n    // Non-fungible bit. If an id has this bit set, it is a non-fungible (either collection or token)\n    uint256 internal constant _NF_BIT = 1 << 255;\n\n    // Mask for non-fungible collection (including the nf bit)\n    uint256 internal constant _NF_COLLECTION_MASK = uint256(type(uint32).max) << 224;\n    uint256 internal constant _NF_TOKEN_MASK = ~_NF_COLLECTION_MASK;\n\n    function isFungibleToken(uint256 id) internal pure returns (bool) {\n        return id & _NF_BIT == 0;\n    }\n\n    function isNonFungibleToken(uint256 id) internal pure returns (bool) {\n        return id & _NF_BIT != 0 && id & _NF_TOKEN_MASK != 0;\n    }\n\n    function getNonFungibleCollection(uint256 nftId) internal pure returns (uint256) {\n        return nftId & _NF_COLLECTION_MASK;\n    }\n}\n\nabstract contract ERC1155InventoryBase is IERC1155, IERC1155MetadataURI, IERC1155Inventory, IERC165, Context {\n    using ERC1155InventoryIdentifiersLib for uint256;\n\n    bytes4 private constant _ERC165_INTERFACE_ID = type(IERC165).interfaceId;\n    bytes4 private constant _ERC1155_INTERFACE_ID = type(IERC1155).interfaceId;\n    bytes4 private constant _ERC1155_METADATA_URI_INTERFACE_ID = type(IERC1155MetadataURI).interfaceId;\n    bytes4 private constant _ERC1155_INVENTORY_INTERFACE_ID = type(IERC1155Inventory).interfaceId;\n\n    // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\n    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\n\n    // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\n\n    // Burnt non-fungible token owner's magic value\n    uint256 internal constant _BURNT_NFT_OWNER = 0xdead000000000000000000000000000000000000000000000000000000000000;\n\n    /* owner => operator => approved */\n    mapping(address => mapping(address => bool)) internal _operators;\n\n    /* collection ID => owner => balance */\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\n\n    /* collection ID => supply */\n    mapping(uint256 => uint256) internal _supplies;\n\n    /* NFT ID => owner */\n    mapping(uint256 => uint256) internal _owners;\n\n    /* collection ID => creator */\n    mapping(uint256 => address) internal _creators;\n\n    /// @dev See {IERC165-supportsInterface}.\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == _ERC165_INTERFACE_ID ||\n            interfaceId == _ERC1155_INTERFACE_ID ||\n            interfaceId == _ERC1155_METADATA_URI_INTERFACE_ID ||\n            interfaceId == _ERC1155_INVENTORY_INTERFACE_ID;\n    }\n\n    //================================== ERC1155 =======================================/\n\n    /// @dev See {IERC1155-balanceOf(address,uint256)}.\n    function balanceOf(address owner, uint256 id) public view virtual override returns (uint256) {\n        require(owner != address(0), \"Inventory: zero address\");\n\n        if (id.isNonFungibleToken()) {\n            return address(_owners[id]) == owner ? 1 : 0;\n        }\n\n        return _balances[id][owner];\n    }\n\n    /// @dev See {IERC1155-balanceOfBatch(address[],uint256[])}.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory) {\n        require(owners.length == ids.length, \"Inventory: inconsistent arrays\");\n\n        uint256[] memory balances = new uint256[](owners.length);\n\n        for (uint256 i = 0; i != owners.length; ++i) {\n            balances[i] = balanceOf(owners[i], ids[i]);\n        }\n\n        return balances;\n    }\n\n    /// @dev See {IERC1155-setApprovalForAll(address,bool)}.\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        address sender = _msgSender();\n        require(operator != sender, \"Inventory: self-approval\");\n        _operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @dev See {IERC1155-isApprovedForAll(address,address)}.\n    function isApprovedForAll(address tokenOwner, address operator) public view virtual override returns (bool) {\n        return _operators[tokenOwner][operator];\n    }\n\n    //================================== ERC1155Inventory =======================================/\n\n    /// @dev See {IERC1155Inventory-isFungible(uint256)}.\n    function isFungible(uint256 id) external pure virtual override returns (bool) {\n        return id.isFungibleToken();\n    }\n\n    /// @dev See {IERC1155Inventory-collectionOf(uint256)}.\n    function collectionOf(uint256 nftId) external pure virtual override returns (uint256) {\n        require(nftId.isNonFungibleToken(), \"Inventory: not an NFT\");\n        return nftId.getNonFungibleCollection();\n    }\n\n    /// @dev See {IERC1155Inventory-ownerOf(uint256)}.\n    function ownerOf(uint256 nftId) public view virtual override returns (address) {\n        address owner = address(_owners[nftId]);\n        require(owner != address(0), \"Inventory: non-existing NFT\");\n        return owner;\n    }\n\n    /// @dev See {IERC1155Inventory-totalSupply(uint256)}.\n    function totalSupply(uint256 id) external view virtual override returns (uint256) {\n        if (id.isNonFungibleToken()) {\n            return address(_owners[id]) == address(0) ? 0 : 1;\n        } else {\n            return _supplies[id];\n        }\n    }\n\n    //================================== ABI-level Internal Functions =======================================/\n\n    /**\n     * Creates a collection (optional).\n     * @dev Reverts if `collectionId` does not represent a collection.\n     * @dev Reverts if `collectionId` has already been created.\n     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\n     * @param collectionId Identifier of the collection.\n     */\n    function _createCollection(uint256 collectionId) internal virtual {\n        require(!collectionId.isNonFungibleToken(), \"Inventory: not a collection\");\n        require(_creators[collectionId] == address(0), \"Inventory: existing collection\");\n        _creators[collectionId] = _msgSender();\n        emit CollectionCreated(collectionId, collectionId.isFungibleToken());\n    }\n\n    /// @dev See {IERC1155InventoryCreator-creator(uint256)}.\n    function _creator(uint256 collectionId) internal view virtual returns (address) {\n        require(!collectionId.isNonFungibleToken(), \"Inventory: not a collection\");\n        return _creators[collectionId];\n    }\n\n    //================================== Internal Helper Functions =======================================/\n\n    /**\n     * Returns whether `sender` is authorised to make a transfer on behalf of `from`.\n     * @param from The address to check operatibility upon.\n     * @param sender The sender address.\n     * @return True if sender is `from` or an operator for `from`, false otherwise.\n     */\n    function _isOperatable(address from, address sender) internal view virtual returns (bool) {\n        return (from == sender) || _operators[from][sender];\n    }\n\n    /**\n     * Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\n     * @dev Reverts if `to` is not a contract.\n     * @dev Reverts if the call to the target fails or is refused.\n     * @param from Previous token owner.\n     * @param to New token owner.\n     * @param id Identifier of the token transferred.\n     * @param value Amount of token transferred.\n     * @param data Optional data to send along with the receiver contract call.\n     */\n    function _callOnERC1155Received(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        require(IERC1155TokenReceiver(to).onERC1155Received(_msgSender(), from, id, value, data) == _ERC1155_RECEIVED, \"Inventory: transfer refused\");\n    }\n\n    /**\n     * Calls {IERC1155TokenReceiver-onERC1155batchReceived} on a target contract.\n     * @dev Reverts if `to` is not a contract.\n     * @dev Reverts if the call to the target fails or is refused.\n     * @param from Previous tokens owner.\n     * @param to New tokens owner.\n     * @param ids Identifiers of the tokens to transfer.\n     * @param values Amounts of tokens to transfer.\n     * @param data Optional data to send along with the receiver contract call.\n     */\n    function _callOnERC1155BatchReceived(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        require(\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(_msgSender(), from, ids, values, data) == _ERC1155_BATCH_RECEIVED,\n            \"Inventory: transfer refused\"\n        );\n    }\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC-1155 Multi Token Standard, basic interface\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\n * Note: The ERC-165 identifier for this interface is 0xd9b67a26.\n */\ninterface IERC1155 {\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    event URI(string _value, uint256 indexed _id);\n\n    /**\n     * Safely transfers some token.\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if `from` has an insufficient balance.\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155received} fails or is refused.\n     * @dev Emits a `TransferSingle` event.\n     * @param from Current token owner.\n     * @param to Address of the new token owner.\n     * @param id Identifier of the token to transfer.\n     * @param value Amount of token to transfer.\n     * @param data Optional data to send along to a receiver contract.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external;\n\n    /**\n     * Safely transfers a batch of tokens.\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if `ids` and `values` have different lengths.\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if `from` has an insufficient balance for any of `ids`.\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\n     * @dev Emits a `TransferBatch` event.\n     * @param from Current token owner.\n     * @param to Address of the new token owner.\n     * @param ids Identifiers of the tokens to transfer.\n     * @param values Amounts of tokens to transfer.\n     * @param data Optional data to send along to a receiver contract.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n\n    /**\n     * Retrieves the balance of `id` owned by account `owner`.\n     * @param owner The account to retrieve the balance of.\n     * @param id The identifier to retrieve the balance of.\n     * @return The balance of `id` owned by account `owner`.\n     */\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\n\n    /**\n     * Retrieves the balances of `ids` owned by accounts `owners`. For each pair:\n     * @dev Reverts if `owners` and `ids` have different lengths.\n     * @param owners The addresses of the token holders\n     * @param ids The identifiers to retrieve the balance of.\n     * @return The balances of `ids` owned by accounts `owners`.\n     */\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * Enables or disables an operator's approval.\n     * @dev Emits an `ApprovalForAll` event.\n     * @param operator Address of the operator.\n     * @param approved True to approve the operator, false to revoke an approval.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * Retrieves the approval status of an operator for a given owner.\n     * @param owner Address of the authorisation giver.\n     * @param operator Address of the operator.\n     * @return True if the operator is approved, false if not.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC-1155 Multi Token Standard, optional metadata URI extension\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\n * Note: The ERC-165 identifier for this interface is 0x0e89341c.\n */\ninterface IERC1155MetadataURI {\n    /**\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n     * @dev URIs are defined in RFC 3986.\n     * @dev The URI MUST point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\n     * @dev The uri function SHOULD be used to retrieve values if no event was emitted.\n     * @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\n     * @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\n     *  an implementation to return a valid string even if the token does not exist.\n     * @return URI string\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155Inventory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC-1155 Multi Token Standard, optional Inventory extension\n * @dev See https://eips.ethereum.org/EIPS/eip-xxxx\n * Interface for fungible/non-fungible tokens management on a 1155-compliant contract.\n *\n * This interface rationalizes the co-existence of fungible and non-fungible tokens\n * within the same contract. As several kinds of fungible tokens can be managed under\n * the Multi-Token standard, we consider that non-fungible tokens can be classified\n * under their own specific type. We introduce the concept of non-fungible collection\n * and consider the usage of 3 types of identifiers:\n * (a) Fungible Token identifiers, each representing a set of Fungible Tokens,\n * (b) Non-Fungible Collection identifiers, each representing a set of Non-Fungible Tokens (this is not a token),\n * (c) Non-Fungible Token identifiers. \n\n * Identifiers nature\n * |       Type                | isFungible  | isCollection | isToken |\n * |  Fungible Token           |   true      |     true     |  true   |\n * |  Non-Fungible Collection  |   false     |     true     |  false  |\n * |  Non-Fungible Token       |   false     |     false    |  true   |\n *\n * Identifiers compatibilities\n * |       Type                |  transfer  |   balance    |   supply    |  owner  |\n * |  Fungible Token           |    OK      |     OK       |     OK      |   NOK   |\n * |  Non-Fungible Collection  |    NOK     |     OK       |     OK      |   NOK   |\n * |  Non-Fungible Token       |    OK      |   0 or 1     |   0 or 1    |   OK    |\n *\n * Note: The ERC-165 identifier for this interface is 0x469bd23f.\n */\ninterface IERC1155Inventory {\n    /**\n     * Optional event emitted when a collection (Fungible Token or Non-Fungible Collection) is created.\n     *  This event can be used by a client application to determine which identifiers are meaningful\n     *  to track through the functions `balanceOf`, `balanceOfBatch` and `totalSupply`.\n     * @dev This event MUST NOT be emitted twice for the same `collectionId`.\n     */\n    event CollectionCreated(uint256 indexed collectionId, bool indexed fungible);\n\n    /**\n     * Retrieves the owner of a non-fungible token (ERC721-compatible).\n     * @dev Reverts if `nftId` is owned by the zero address.\n     * @param nftId Identifier of the token to query.\n     * @return Address of the current owner of the token.\n     */\n    function ownerOf(uint256 nftId) external view returns (address);\n\n    /**\n     * Introspects whether or not `id` represents a fungible token.\n     *  This function MUST return true even for a fungible token which is not-yet created.\n     * @param id The identifier to query.\n     * @return bool True if `id` represents afungible token, false otherwise.\n     */\n    function isFungible(uint256 id) external pure returns (bool);\n\n    /**\n     * Introspects the non-fungible collection to which `nftId` belongs.\n     * @dev This function MUST return a value representing a non-fungible collection.\n     * @dev This function MUST return a value for a non-existing token, and SHOULD NOT be used to check the existence of a non-fungible token.\n     * @dev Reverts if `nftId` does not represent a non-fungible token.\n     * @param nftId The token identifier to query the collection of.\n     * @return The non-fungible collection identifier to which `nftId` belongs.\n     */\n    function collectionOf(uint256 nftId) external pure returns (uint256);\n\n    /**\n     * Retrieves the total supply of `id`.\n     * @param id The identifier for which to retrieve the supply of.\n     * @return\n     *  If `id` represents a collection (fungible token or non-fungible collection), the total supply for this collection.\n     *  If `id` represents a non-fungible token, 1 if the token exists, else 0.\n     */\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    /**\n     * @notice this documentation overrides {IERC1155-balanceOf(address,uint256)}.\n     * Retrieves the balance of `id` owned by account `owner`.\n     * @param owner The account to retrieve the balance of.\n     * @param id The identifier to retrieve the balance of.\n     * @return\n     *  If `id` represents a collection (fungible token or non-fungible collection), the balance for this collection.\n     *  If `id` represents a non-fungible token, 1 if the token is owned by `owner`, else 0.\n     */\n    // function balanceOf(address owner, uint256 id) external view returns (uint256);\n\n    /**\n     * @notice this documentation overrides {IERC1155-balanceOfBatch(address[],uint256[])}.\n     * Retrieves the balances of `ids` owned by accounts `owners`.\n     * @dev Reverts if `owners` and `ids` have different lengths.\n     * @param owners The accounts to retrieve the balances of.\n     * @param ids The identifiers to retrieve the balances of.\n     * @return An array of elements such as for each pair `id`/`owner`:\n     *  If `id` represents a collection (fungible token or non-fungible collection), the balance for this collection.\n     *  If `id` represents a non-fungible token, 1 if the token is owned by `owner`, else 0.\n     */\n    // function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @notice this documentation overrides its {IERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n     * Safely transfers some token.\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if `id` does not represent a token.\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\n     * @dev Reverts if `id` represents a non-fungible token and is not owned by `from`.\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\n     * @dev Reverts if `id` represents a fungible token and `from` has an insufficient balance.\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155received} fails or is refused.\n     * @dev Emits an {IERC1155-TransferSingle} event.\n     * @param from Current token owner.\n     * @param to Address of the new token owner.\n     * @param id Identifier of the token to transfer.\n     * @param value Amount of token to transfer.\n     * @param data Optional data to pass to the receiver contract.\n     */\n    // function safeTransferFrom(\n    //     address from,\n    //     address to,\n    //     uint256 id,\n    //     uint256 value,\n    //     bytes calldata data\n    // ) external;\n\n    /**\n     * @notice this documentation overrides its {IERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n     * Safely transfers a batch of tokens.\n     * @dev Reverts if `to` is the zero address.\n     * @dev Reverts if the sender is not approved.\n     * @dev Reverts if one of `ids` does not represent a token.\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\n     * @dev Reverts if one of `ids` represents a non-fungible token and is not owned by `from`.\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\n     * @dev Reverts if one of `ids` represents a fungible token and `from` has an insufficient balance.\n     * @dev Reverts if one of `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\n     * @dev Emits an {IERC1155-TransferBatch} event.\n     * @param from Current tokens owner.\n     * @param to Address of the new tokens owner.\n     * @param ids Identifiers of the tokens to transfer.\n     * @param values Amounts of tokens to transfer.\n     * @param data Optional data to pass to the receiver contract.\n     */\n    // function safeBatchTransferFrom(\n    //     address from,\n    //     address to,\n    //     uint256[] calldata ids,\n    //     uint256[] calldata values,\n    //     bytes calldata data\n    // ) external;\n}\n"
    },
    "@animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/IERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n/**\n * @title ERC-1155 Multi Token Standard, token receiver\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\n * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n */\ninterface IERC1155TokenReceiver {\n    /**\n     * @notice Handle the receipt of a single ERC1155 token type.\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n     * This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     *  (i.e. 0xf23a6e61) to accept the transfer.\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\n     * @param from      The address which previously owned the token\n     * @param id        The ID of the token being transferred\n     * @param value     The amount of tokens being transferred\n     * @param data      Additional data with no specified format\n     * @return bytes4   `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @notice Handle the receipt of multiple ERC1155 token types.\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n     * This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     *  (i.e. 0xbc197c81) if to accept the transfer(s).\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from      The address which previously owned the token\n     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\n     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\n     * @param data      Additional data with no specified format\n     * @return          `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/staking/IRewardDistributionRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract IRewardDistributionRecipient is Ownable {\n    address public rewardDistribution;\n\n    function notifyRewardAmount(uint256 reward) external virtual;\n\n    modifier onlyRewardDistribution() {\n        // solhint-disable-next-line reason-string\n        require(_msgSender() == rewardDistribution, \"Caller is not reward distribution\");\n        _;\n    }\n\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\n        rewardDistribution = _rewardDistribution;\n    }\n}\n"
    },
    "contracts/staking/LP_REVV_SAND_Unipool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./IRewardDistributionRecipient.sol\";\n\ninterface IERC20Mintable {\n    function mint(address holder, uint256 amount) external;\n}\n\ncontract LPTokenWrapper {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable uni;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    constructor(IERC20 uni_) public {\n        uni = uni_;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function stake(uint256 amount) public virtual {\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        uni.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    function withdraw(uint256 amount) public virtual {\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        uni.safeTransfer(msg.sender, amount);\n    }\n}\n\n// solhint-disable-next-line contract-name-camelcase\ncontract LP_REVV_SAND_Unipool is LPTokenWrapper, IRewardDistributionRecipient {\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 public immutable DURATION;\n    IERC20Mintable public immutable rewardToken;\n\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n\n    constructor(\n        IERC20 uni_,\n        IERC20Mintable rewardToken_,\n        uint256 duration\n    ) public LPTokenWrapper(uni_) {\n        rewardToken = rewardToken_;\n        DURATION = duration;\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply() == 0) {\n            return rewardPerTokenStored;\n        }\n        return rewardPerTokenStored.add(lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(totalSupply()));\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return balanceOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\n    }\n\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\n    function stake(uint256 amount) public override updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        super.stake(amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public override updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        super.withdraw(amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function exit() external {\n        getReward();\n        withdraw(balanceOf(msg.sender));\n    }\n\n    function getReward() public updateReward(msg.sender) {\n        uint256 reward = earned(msg.sender);\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardToken.mint(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function notifyRewardAmount(uint256 reward) external override onlyRewardDistribution updateReward(address(0)) {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(DURATION);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(DURATION);\n        }\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(DURATION);\n        emit RewardAdded(reward);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/staking/LP_REVV_ETH_Unipool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./IRewardDistributionRecipient.sol\";\n\ncontract LPTokenWrapper {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable uni;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    constructor(IERC20 uni_) public {\n        uni = uni_;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function stake(uint256 amount) public virtual {\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        uni.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    function withdraw(uint256 amount) public virtual {\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        uni.safeTransfer(msg.sender, amount);\n    }\n}\n\n// solhint-disable-next-line contract-name-camelcase\ncontract LP_REVV_ETH_Unipool is LPTokenWrapper, IRewardDistributionRecipient {\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 public immutable DURATION;\n\n    uint256 public periodFinish = 0;\n    uint256 public lockFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n\n    constructor(\n        IERC20 uni_,\n        uint256 duration,\n        uint256 lockPeriod\n    ) public LPTokenWrapper(uni_) {\n        DURATION = duration;\n        lockFinish = block.timestamp + lockPeriod;\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply() == 0) {\n            return rewardPerTokenStored;\n        }\n        return rewardPerTokenStored.add(lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(totalSupply()));\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return balanceOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\n    }\n\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\n    function stake(uint256 amount) public override updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        super.stake(amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public override updateReward(msg.sender) {\n        require(block.timestamp > lockFinish, \"Locked\");\n        require(amount > 0, \"Cannot withdraw 0\");\n        super.withdraw(amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function exit() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    function notifyRewardAmount(uint256 reward) external override onlyRewardDistribution updateReward(address(0)) {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(DURATION);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(DURATION);\n        }\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(DURATION);\n        emit RewardAdded(reward);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}